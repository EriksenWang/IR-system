{
    "title": "N/A",
    "publication_date": "1983",
    "authors": [],
    "abstract": "Vortex methods for slightly viscous three-dimensional flow are presented. Vortex methods have been used extensively for two-dimensional problems, though their most efficient extension to three- dimensional problems is still under investigation. A method that evaluates the vorticity by exactly differentiat- ing an approximate velocity field is applied. Numerical results are presented for a flow past a semi-infinite plate, and they demonstrate three-dimensional features of the flow and transition to turbulence.",
    "full_text": "1. Introduction. Vortex methods as suggested by Chorin [12] were applied to various problems to simulate incompressible flows (see [34] and [32] for a review).\n\nThese grid-free methods represent complicated flows by concentrating the computa- tional elements in regions where small-scale phenomena predominate and few elements elsewhere. In addition, vortex methods introduce no artificial viscosity, and therefore they are adequate for solving the slightly viscous Navier-Stokes equation.\n\nVortex methods have been used extensively in the last 15 years, especially for two-dimensional flows. Although three-dimensional vortex methods have been con- sidered inherently difficult, we represent a scheme that involves no elaborate computa- tions and is a natural extension of the two-dimensional schemes. We applied this method to a three-dimensional flow past a semi-infinite plate at high Reynolds number. The velocity far away from the plate is assumed to be uniform. If we assume that the flow is independent of the spanwise variable, the problem is two-dimensional, otherwise the flow is three-dimensional. Chorin [11]- [13] solved the two-dimensional problem numerically; he used computational elements, called blobs, with a smoothed kernel. This kernel is obtained by convolving the singular kernel, which connects vorticity and velocity, with a smoothing function (called a cutoff function). The latter approximates a delta function in the sense that a finite number of its moments are identical to those of a delta function.\n\nA numerical solution to a three-dimensional problem was introduced in 1980 by Chorin  [11] and by Leonard  [32]- [34] using different vortex filament methods. In the filament method we approximate the initial velocity and vorticity along vortex lines, whose tangents are parallel to the vorticity vector. Since circulation is conserved along vortex lines, there is no need to update vorticity. Both authors [11], [34] stepped the Navier-Stokes equations in time by splitting them to the Euler and the heat equations.\n\nIn [33] Leonard introduces one of the earliest vortex methods to solve the inviscid three-dimensional Euler equations numerically. In his computations he was able to simulate the time development of spotlike disturbances in laminar three-dimensional boundary layer. He suggested to split the velocity field into a sum of the velocity at infinity and a perturbed one, and to track vortex lines and compute their curvatures.\n\nHe extended his method to the viscous case [34] using a core spreading technique, in which the core of the filaments was changed every timestep to satisfy the heat equation. This scheme was proved to approximate the wrong equations, rather than the Navier- Stokes equations [22]. Chorin suggested a different filament method to solve the three-dimensional problem. He approximates vortex lines by segments and then, using the Biot-Savart law, he updates the endpoints of the segments for the Euler equation at every timestep. The heat equation is approximated in the statistical sense via a random-walk algorithm. Since Chorin uses segments to approximate vortex lines, his algorithm involves no elaborate calculations, such as evaluation of curvatures. However it is not highly accurate in space. The purpose of this paper is to modify Chorin's scheme to gain higher spatial accuracy. Following Beale and Majda [4], [5] and Anderson and Greengard [1], [2], we achieve higher spatial accuracy by generalizing the two-dimensional blobs to three- dimensional ones. Vorticity as well as blob locations must be updated at every timestep. Two versions of the three-dimensional blob extension were suggested. Beale and Majda suggested approximating spatial derivatives with finite differences, whereas Anderson explicitly differentiates the smoothed kernel mentioned above. We chose to apply the method of Anderson, since it eliminates one source of error, associated with spatial differentiation. The algorithm and its accuracy is then similar to the two-dimensional one. The results shown here are the first attempt to apply this scheme numerically. Convergence was proved in [3] and [10] for the Euler equations. Applying the convergence proofs to our scheme, we show that for smooth cutoff functions second- order accuracy in space is gained. Higher-order space accuracy can be achieved by using cutoff functions, in which more moments agree with those of a delta function. We were able to resolve three-dimensional features of the flow and transition to turbulence. The numerical results are in agreement with experimental results shown in [25], which suggest that at high Reynolds numbers there exist a large number of small hairpins.\n\nSpectral methods, which are highly accurate for smooth flows, were used for turbulent flows by Orszag and Kells [35] and Orszag and Patera [36]. In [35] and [36] periodic boundary conditions in the streamwise direction were assumed. Note that nonperiodic boundary conditions in the streamwise direction might impose nonsmooth- ness of the solution, such as that of the Blasius solution at the leading edge. This nonsmoothness must be carefully treaded when using a spectral method. If we use a finite-difference scheme, it requires a mesh that is inversely proportional to the square root of the Reynolds number. However, a new finite-difference scheme with local mesh refinement has recently been developed by Bell, Colella, and Glaz [7] and its application for three-dimensional flows with transition to turbulence need to be tested. The paper is organized as follows. In 2 we represent the fundamental equations, in 3 the numerical scheme, and in 4 we describe the boundary conditions. In 5 we show that if we use a smooth cutoff function, second-order space accuracy is assured for the Euler equations. The error from the viscous term is discussed as well. We also suggest a new way for treating this term. Section 6 represents numerical results and 7 concludes the paper.\n\n2. Representation of the problem. The flow is described by the Navier-Stokes equations, formulated for the vorticity : c,/ (u. V)-(:. V)u= R-A : ,\n\n(2.1) div u 0, where : =curl u, u= (u, v, w) is the velocity vector, r= (x, y, z) is the position vector and A V 2 is the Laplace operator. R UL! u is the Reynolds number, where U and L are typical velocity and length, respectively, and , is the viscosity.\n\nWe will solve the above equations for a flow past a semi-infinite flat plate located at z =0, x->0. Far away from the plate (for zc) there is a uniform flow in the positive x direction, i.e., u=(U,0,0) forz, t>0.\n\nOn the plate we impose the no-leak boundary condition u. n 0, where n is normal to the plate. We also impose the no-slip boundary condition u. s=0, where s is tangential to the plate. Initially, u (Uoo, 0, 0) at 0. The Prandtl equations are known to approximate the Navier-Stokes equations near the plate, and are used therefore in a thin layer 0<= z =< Zo. The Navier-Stokes equations are employed in the region z-> Zo. In the Prandtl equations we assume that s c (sol, :2,0), i.e., :3 is negligible in comparison to the other components (see, e.g., [39]). Thus a,l + (u. V),\n\nso'= Oz' so2 zz' u=(u, v, w).\n\nThe Pradtl equations admit the two-dimensional steady state solutionthe Blasius solution. However, the three-dimensional Navier-Stokes equations are unstable at high Reynolds numbers (R => 1000), i.e., small perturbations in the Blasius solution may cause large perturbations in the solution as time progresses. Once the disturbances in the Blasius solution begin to grow, spanwise vortices appear, the solution then depends on the spanwise variable y, and there is a transition to turbulence.\n\nTheoretical aspects of this instability are given in Benney and Lin [9] and Benney [8]; they suggest that the secondary motions produced by the interaction of three- dimensional modes with two-dimensional ones can produce profiles that are highly unstable. Physical experiments done by Kline et al. [31], Klebanoff, Tidstrom, and Sargent [30], and Head and Bandyapodhyay [25] showed that secondary motion, caused by the production of longitudinal vorticity due to three-dimensional disturb- ances, creates highly unstable profiles leading to turbulent spots. Klebanoff, Tidstrom, and Sargent [30] suggested that the weak three-dimensional disturbances may control the nonlinear development of the flow and its transition to turbulence.\n\nKinney and Paolino [28], Schmall and Kinney [43], and Kinney and Cielak [29] suggested vorticity formulation along with a boundary condition for the vorticity on the body. Recently, van der Vegt [44] performed two-and three-dimensional calcula- tions using a vortex-spectral method. He simulated the flow over a cylinder and pointed out the ability of the vortex model to describe typical viscous phenomena, such as flow separation.\n\nAs the outcome of numerical and physical experiments two main models of the turbulent boundary layer have emerged. One is the coherent structure with large horseshoes [27], and the other is the uncorrelated hairpins 14], [42]. Using a numerical simulation, Kim and Moin  [27] found out that the bursting process is associated with well-organized vortical structures described by large horseshoes. On the other hand, Chorin [14], Siggia [42], Kerr  [26], and Head and Bandyapodhyay [25] claim that the structure is better described by uncorrelated small hairpins.\n\nThe experiments of Head and Bandyapodhyay [25] for high Renyolds numbers (R _-> 1,000) indicate the existence of large numbers of vortex pairs or hairpin vortices, extending through at least a substantial part of the boundary-layer thickness; for the most part they are inclined to the wall at a characteristic angle of 40 to 50. At low Reynolds number (R-<_800) the hairpins are much less elongated and are better described as horseshoe vortices or vortex loops. Head and Bandyapodhyay [25] note that almost all investigators have used experimental techniques that limit the observations to relatively low Reynolds numbers, where the structure is markedly different from that at high Reynolds numbers; vortex lines tend to appear as low aspect-ratio loops rather than extended vortex pairs or hairpins. In our calculations, we found support to the hairpins model, rather than to the horseshoe model.\n\nOne of the conclusions from the experimental data in [31] is that the flow is periodic in the spanwise direction. We therefore solve (2.1) and (2.2) with the following periodic boundary condition\" u(x,y+q,z)=u(x,y,z), (x,y+q,z)=(x,y,z). As was noted in [11], q was found to be roughly 0.1.\n\n3. The numerical scheme. We first describe the random-vortex method for the Navier-Stokes equations and then the three-dimensional sheet method, called the tile method, for the Prandtl equations. Note that for a two-dimensional case the last term in the left-hand side of (3.1) vanishes, and therefore vorticity is a material property, i.e., D/Dt=O/Ot+(u. V):=0. However, this is not necessarily true in three dimensions.\n\nThe heat equation is (3.2) .e0_= R_ Z: ot (it is also called the diffusion equation). Both (3.1) and (3.2) are easier to analyze than the Navier-Stokes equations. We apply a Strang-type scheme to step the Navier-Stokes equations in time, using (3.1) and (3.2). This is done in the following way: we represent both problems above in the form\n\nFor the first one A() AI() (. and for the second A() A2(sc) R -1 A.\n\nFor both operators we apply the modified Euler scheme: At n+l n ,,+/:z ,, +_._ a(\"), \"+ Ata(n+l/2).\n\nLet L(At) be the operator that acts on s c\" to yield Cn+, i.e., L(At)\" \"+ \" + AtA ( n + At --fA( L(At), L2(At) are defined as L(At) with A1, A2 replacing A. We finally arrive at the following scheme for discretizating (2.1) in time:\n\nAccording to [21 ], this scheme is second-order accurate in time, is accurate up to order two in the time variable, even in the nonlinear case. The same time discretization was used also in 17] and 18].\n\n3.2. Spatial discretization.\n\n3.2.1. The Euler equations. For an incompressible fluid the following relation ((3.7) below) between vorticity and velocity holds [15]. Since divu--0, there exists a function $, called a stream function, such that (3.3) u=Vx$, and we may choose such that div $ 0. By definition (3.4) =Vu, and therefore, from (3.3), we find that (3.) a, -:. Thus we may determine the velocity from the vorticity by first solving the Poisson equation (3.5), and then applying (3.3).\n\nIf G is a fundamental solution of the Laplace equation, then\n\nwhere G(x)=-l/4rlxI, x=(x,y,z), and the integration is taken over the whole three-dimensional space. Substituting (3.6)\n\nII\"rlxl z 0 --y X Note that (3.7) is a consequence of incompressibility only.\n\nIn vortex methods particle trajectories are followed. Let x(x, t) be the trajectory of a particle in the fluid that is at the point z at 0. For fixed x the trajectory x(x, t) is obtained from the velocity field u as a solution of the ordinary differential equation: dx (z, t)= u(x(ot, t) t), x(ot, 0) (3.9) d--Combining (3.7) and (3.8), we find dX_dt I K(x(at, t)-x'(at, t))sC(x', t) dx' (3.10) f K(x(at, t)-x(at', t))sC(x(at', t), t) dat'.\n\nThe last equality is true, since for an incompressible fluid the Jacobian ofthe transforma- tion at(t) x(at, t) is the identity.\n\nWe must supply initial conditions to (3.10). We therefore set the initial velocity and vorticity on a regular mesh:\n\nai (hi il h2i2, h3i3),\n\nand then track these particles in Lagrangian coordinates. To discretize the equations, we set (= Yj , where the are functions of small support. Let Kj be the intensity of the jth particle, i.e., K dx dy dz. Then we obtain the following set of ordinary differential equations for the approximate locations of the particles (3.11)\n\n) is the cutoff function, and K K 4' is a smoothed kernel. K replaces the kernel K (defined in (3.8)), which is singular at x 0. Here Y(t), ,(t) approximate j(t) and xi(t), respectively, the exact intensity and particle locations for the Euler equations.\n\nWe may write K in the following way:\n\n(3.12) K(x) K (x)f (x),\n\nwhere f(x)= (1/3)f(x/6). If f(x) is chosen to be radially symmetric, the relation between b and f is b(r)=f'(r)/47rr (see [6]). We specify f(x)=f(r) below:\n\nThis function is continuous with its first derivative at r-1. Substituting (3.8) and (3.13) in (3.12) yields -for Ixl < --y X For a three-dimensional Euler equation vorticity is not a material quantity, and therefore we must track vorticity as well as blob locations. We use the equation d -(. V)u. dt Therefore, the evolution of vorticity along particle trajectories is described by the equations (3.15) d..__ (x(t, t) t)= ((x(et, t), t). Vx)U(X(t, t), t) dt where V,, is the gradient with respect to the Eulerian coordinates. Applying (3.11), we find that the following equality holds for the approximated velocity fi 7xfi(x t)where V,,Ks is derived analytically in Eulerian coordinates using the definition of Ks (3.15). Substitution of the last equality in (3. This can be written in the form di (3.17) dt (;A(:i-j)j(t)+ ;/B(f,-);(t) + ;C(,-f7)j(t)), j=l where di (Ki'x, d/y, ff), and 0 A(x) 2----Ks(x), OX 0 B(x) _---Ks(x), oy C(x) z--K(x). OZ Or more explicitly, Ki X K, A(x);)-4;1' (-(IxlZ 3 ), 3xy, 3xz) x (3.18)\n\n;YB(x)ffj 4rlxl (3yx, -(Ixl-3y), 3yz) x j, ;, c (x)# 411 (3zx, 3zy, -(Ixl=-3z2)) x for Ixl < , and ;A(x)ff) =4rr85 (-(2.582 1.51x[ -3x2), 3xy, 3xz) x , (3.19) ff/ (3yx, -(2.562-1 51xl =-3y2), 3yz) x , ff'B(x)j 47r6 ,C(x)j'z 47r; 5' (3zx, 3zy,-(2.5t52 1.51xl=-3z=)) x , for ]xl > 3. To conclude, the semidiscrete three-dimensional scheme that we used for the Euler equation is di\n\nwhere Ks is defined in (3.14), and the second equation is given in more detail in (3 17)- (3.19). Here, are initial values of the intensities of the computational elements on the initial grid.\n\n3.2.2. The heat equation. The second equation to solve is the heat equation:\n\nFollowing Chorin ([11] and [13]) we use the random-walk method to step the heat equation in time, i.e., we move the blobs according to ~n+l Xi Xi +l(At), where l(At)= (71(At), r/z(At), r/3(At)) and TI,T2 '/3 are Gaussian random variables with mean zero and variance 2At chosen independently of each other.\n\nNote that we use the trapezoidal rule in (3.11) and (3.16) to approximate spatial integrals. The error due to this approximation depends on the derivatives of the integrands, and in particular on the voriticity, i.e., if the vorticity grows so does the error. Therefore, if we find that the vorticity grows while using blobs for the Navier- Stokes equations, we replace a blob that carries a high enough vorticity with several blobs. The new blobs are placed at the same computational point, and share the same total vorticity of the original blob. Since the random walk is used to simulate the heat equation, these blobs will likely find themselves in different locations at the next timestep. If we use filaments, growth in vorticity causes stretching of the filaments. In this case we should split the vortex line into several short ones, and then use some interpolation between the endpoints of the old filament to keep a desired accuracy. This interpolation is an additional source of error, but it can be avoided if we adopt the three-dimensional vortex blob method described above. 3.3. Prandtl equations. The Prandtl equations (2.2) used in a thin layer 0-< z-< z0 above the plate were solved numerically by the tile method, which is the three- dimensional extension of the sheet method (see [11], [13]). This was done to evaluate the boundary conditions on the plate, since it was found in [13] and [11] that blobs did not accurately represent the velocity field near the boundary. We describe the tile method for a region 0= < z =< o, noting that the boundary conditions at z z0 will be viewed as those at infinity, seen from the plate.\n\nIn the tile method the computational elements are rectangles, parallel to the plate, that represent a jump in the velocity components u, v. Thus (1, :_) is the intensity of the tile, where 2 Uabove--Ubelow, :l Vabove--Vblow. Consider a collection of N tiles T, with intensities (()i, (:2)i), 1,. ., N and centers xi (xi, Yi, Zi). The motions of these tiles are described by (2.3), i.e., Ov Oz Oz and if we integrate these equations with respect to z, we have (3.2) u(x, y, z, )= u(x, y, )-\n\nv(x, y, , )= v(x, y, ) + (x, , z') ', where u(x, y, t), v(x, y, t) are the velocity components u, v as z m. By incompressi- bility and the boundary condition w(x, y, 0, t)=0, we have (3.23)\n\nw(x, y, z, ) -Ox u(x, y, ') dz'-O v(x, y, dz') dz'.\n\nEquations (3.21)-(3.23) provides a relation between the voicity and the velocity, which replaces the one given by (3.7) for the interior region.\n\nThe above equations can be approximated by 1 (3.24) u (x, y, z, t) u(xi, y, t)-()-(\n\nwhere d 1-Ix-xl/h, and 1-lY-YI/h are smoothing functions, the summa- tions in (2.24)-(2.25) are over all for which 0N d N 1, 0N N 1, and N z.\n\nSimilarly, from (3.23) (x, , z, -(L -)/h (J+ J_)/h, where I+_ u(x, + h,/2, y,, t)z,-Y. (2)jaffz, J+ l)(Xi, y, + hz/2, t)z, + EY (,)jdjf. z, and d. 1 Ix,+/-h/2-xl ly,+/-hz/2-yl hi fj=lhz z=min(zi, z).\n\nThe sums x/, yx are over all T, such that 0-<f < 1, and 0 < d-< 1, 0 < d-< 1, respectively. Similarly, the sums ]+, YY__ are over all T, such that 0<-dj =< 1, and 0 <=ff -< 1, 0-<fj-=< 1, respectively. This is a thin vertical layer, and therefore the number of operations to calculate the velocity fields for the tile method is O(N).\n\nFor simplicity, we describe the motion of a tile for a first-order timestepping Euler scheme X+I xi + At\" ui, y+l y, + At. vi, Z+I z + At. w + r/(At),\n\nwhere r/ is a Gaussian random variable with mean zero and variance 2At/R. Note that r/appears only in the z component, since the Prandtl equation (2.2) assumes that vorticity diffuses in the z direction only. 4. Boundary conditions. We first specify the boundary conditions for the region z_>-Zo, in which the Navier-Stokes equations are used. At infinity the flow is uniform and is in the x direction, i.e., u(x, y, z, t)-(U, 0, 0) as z oo. Boundary conditions also have to be imposed at z Zo (see [39, p. 111]), and they link the two computational regions. If a tile finds itself in the region z_-> Zo after taking a timestep, it turns into a blob. Similarly, if a blob enters the thin layer in which the Prandtl equations are employed, it becomes a tile. We assign the same circulation to a tile which turns into a blob and vice versa. Thus Ki ihlh2, where K is the intensity of the blob, and s is the intensity of the tile. In addition, we require continuity of u and v at z Zo.\n\nThe boundary conditions for the Prandtl equations are (a) u(x, y, Zo, t) u(x, y, t), and v(x, y, Zo, t)= v(x, y, t), where uoo(x, y, t) and voo(x, y, t) are calculated by the blobs, located at z-> Zo.\n\n(b) u.n =0 at z 0, where n is normal to the plate. This is done by the method of images, i.e., for each blob or tile at (x, y, z), carrying vorticity :(x, y, z) we add an imaginary blob or tile at (x, y, z) with vorticity -(x, y, z).\n\n(c) u s 0 at z 0, where s is tangential to the plate z 0. This is done by creating tiles at the boundary, assigning vorticity to each of them (see [11]). In more detail: we calculate Uo--u(x, y, O) uoo(x, y, t)-o 2 dz and Vo v(x, y, O)= vow(x, y, t)+ o 1 dz, and replace the integrals Jo so2 dz and o :1 dz by the sums j=l ()jdjf and j=l ()jdjf, respectively. The only tiles that contribute to these sums are those located in the region {, )7[[-x1_-< h, ])7-y[_-< h2}. If (Uo, Vo) (0, 0), new tiles are created at (x,y,O) with intensity := (:, :, 0), such that x/sc+_<-:max, where max is a chosen small parameter. As a result the new values of Uo and Vo, denoted by to and o, satisfy (4.1) laol =< :max, Iol :max.\n\nPeriodic boundary conditions were imposed in the following way. For each blob or tile located at (x, y, z) two other imaginary blobs or tiles were added at (x, y + q, z).\n\nTo save computational time, further blobs or tiles were not added, as their contribution to the flow quantities became smaller the further they are from the computational domain.\n\nWe restrict ourselves to the domain 0_-<x_ < Xo, rather than 0_-<x_-<o. Thus we remove any blob or tile whose x-component location exceeds Xo. This is reasonable, since blobs and tiles located far away from the region of interest contribute little to the overall flow. In addition, this procedure economized the cost of computation, for otherwise a large number of computational elements became bunched near x-Xo. 5. Convergence. The first convergence proof for vortex methods was given by Hald and Del Prete [24] for the two-dimensional Euler's equations. Convergence for the three-dimensional version of vortex method that was suggested by Beale and Majda,   for which spatial derivatives are approximated by finite differences, was given in [4], [5], [2]. For our scheme, in which explicit differentiation is applied to approximate spatial derivatives, convergence was first proved by Beale [3 ], and then, using a different approach, by Cottet  [10]. We quote the theorem appearing in [10], since it applies to a slightly more general case, i.e., the restriction d => 4, where d appears in (5.3)- (5.4)   below, is removed in [10].\n\nLet us first define for p [1, ) and m => 0 the Sobolev spaces W\"'P {f, Of LP(Rn),\n\nm} and by II'll , the norm ) II/llm, Y II0/ll o, 0<=ll_<-m and for p the usual modification.\n\nTHEOREM. Convergence in 3D [10]. Assume that the initial vorticity o is smooth enough and that the following conditions hold for the cutofffunction (5.1) qb wm'(R3) Wm'l(g3) Vm>0, (\n\n. f R b(X) dx 1,\n\n(5.3) R (5.4) and that there exist constants C and fl > 1 such that (5.5) h <-C6 t3.\n\nThen there exists a timeand a constant C, depending only on Co, such that for h and 6 small enough 11 7ullo, --< p 6 (3/2, ], We now apply this theorem to our scheme. Using the relation b(r)=f'(r)/47rr 2 derived in [6], we find that 0, th(r) 15. (1-rE)/87r, It is easy to verify that b(r) satisfies (5.2) with d 2. In addition, if we choose the cutoff function b to be infinitely smooth, second-order accuracy is achieved. We would now like to view the importance condition (5.1), in the case where the latter is satisfied for finite m only.\n\nThe error in vortex methods is usually estimated by bounding the part caused by the regularization of the singular kernel separately, and from the one caused by the discretization of the equations. We therefore write the error in the following form\" e u (u: u) + (fi u,) er + ed, where er is the regularization error, caused by replacing the singular kernel K by a smoothed one K, and ed is the discretization error.\n\nIt was proved in [3] and Lemma 5.5 of [10] that Ilerllo,p --< C a, p (3/2, for some time 6 [0, r], provided that (5.2)-(5.4) hold. In addition, as was shown in 10], (5.6) lie. IIo, -<-Ch\"/6 m-, in case that (5.1) holds for every m > 0. A generalization of this theorem for finite m was given in [38, p. 315] for a two-dimensional problem. We must assume, in addition, that d/) E Wm-l'(g2) t\") Wm-l'l(g2), m >_-. 3 or 4' E Wr-I\"(R2) for m >= 2 and has compact support. Then for all arbitrarily small s > 0 there exist a constant Cs, such that ullo, _<_ + hm/m-1), provided that (5.5) is replaced by c6 <=h<=c6 , with c->_/3> 1. Therefore, by choosing ce, /3 appropriately we can balance the regularization error with the dis- cretization error. Similar results were proven in [2] for the three-dimensional vortex methods suggested by Beale and Majda. In our case 4 W'(R3) and has compact support, and if we could apply similar results to a three-dimensional problem, the discretization error would have been O(h/6), Therefore, for 6= Ch /3, the error is at most of order h 4/3. This can be improved by choosing an infinitely smooth cutoff function.\n\nIt was observed in numerical experiments (e.g., [6]) that the formal accuracy of the vortex-blob method might be degraded for a set of radially symmetric test problems. This was understood as loss of accuracy due to the distortion of the initial grid. Beale   and Majda [6] suggested to rezone the grid as time evolves. Another way to overcome this difficulty is to use a fixed grid for this set of problems. This method is discussed and analyzed in [20]. It is most probable, however, that the grid is not as much distorted for a flow past a plate, and therefore the vortex-blob method can be used on the Lagrangian grid for this problem. A consideration of a fixed-grid vortex scheme for this problem needs more extensive research. We turn to the accuracy of the random walk used to model viscosity. It is well known that in two dimensions the random walk approximates the heat equation, though without high accuracy. More accurate error estimates were given in [23] for a one- dimensional heat equation, using a random-walk method with creation of vorticity, i.e., u L\n\nwhere\n\nN is the number of tiles, k is an arbitrary positive number, At is the timestep, and P denotes probability. Note that CR is a decreasing function of R. A numerical study of the vortex sheet method for the Prandtl equations was done by Puckett [37] together with a spline smooth,ng of the velocity field. Convergence of this method was demon- strated numerically, with consistency error of order (h + max)v/At/R. Here h is the initial spacing in the streamwise direction and emax is the maximal vorticity of newly created sheets.\n\nIn 19] we suggest a new way to discretize the viscous term. The idea is to convolve the vorticity with a cutoff function, and approximate the Laplacian of the vorticity by the convolution of the Laplacian of the cutoff function against the vorticity. Another deterministic method was suggested by Degond and Mas-Gallic in [16].\n\n6. Numerical results. We must specify the following parameters for our numerical scheme. The initial grid, with spacing h, h2, the timestep At, the maximum allowed intensity of a newly created tile, :max, are parameters to be chosen. In addition, the cutoff 6, the thickness of the layer for which the Prandtl equations are used Zo, and the physical domain 0_-< x-<_ X0, in which we keep track of the motion of the compu- tational elements, must be specified. We set Xo= 1.5 (as in [11]). We picked Zo- Cx/2At/R, with C 1.5, x/2At/R being the standard deviation of the random walk.\n\nWe made this choice for Zo to ensure that a tile, located in the layer 0-< z-< Zo, will have a high probability of moving out of the tile layer in a few timesteps, and will then turn into a blob. We picked U L-1 and the viscosity v-10-4, so that the Reynolds number R-UL/v-104. This value was high enough to show the three- dimensional effects and the transition to turbulence, as was also observed in the experiments in [25]. Note that the local Reynolds number R, Ux/v depends on x but R does not. Following Chorin [11] we picked h/Tr as the cutoff & This is in agreement with the condition in the convergence theorem in 5, that the cutoff 6 should be larger than the typical distance between neighboring particles, the latter being of order 1/ in our problem.\n\nAfter fixing Xo, Zo, and choosing 6, we had to pick the initial spacing hi, h2, :max, and the timestep At. To do this, we first ran the two-dimensional problem, in which the independent variables are x, z, and whose steady-state solution is analytically known to be the Blasius solution. We found out, as was also pointed out in [40], that hi and :max have primary importance, since they control the number of newly created sheets. The latter determines the number of blobs, and therefore the number of computational elements. If larger numbers of computational elements are used, the error in both interior and exterior regions decreases. We tried the following choices for h, At, and :max\" (a) h At 0.20, SCmax 0.1. (b) hi At 0.15, SCmax 0.075. (C) h At 0.10, SCmax 0.050.\n\nFor these sets of parameters we checked the drag, given by the following formula (see e.g., [41], [11]):\n\n(6.1) D(xo) fo U(Xo, z)( u-U(Xo, z)) clz, and compared it with the Blasius drag Do 0.6641x/xo/R. The integral in equation (6.1) was discretized by the trapezoidal rule Ocom ciu(Xo, Az)( U-U(Xo, Az)) Az, i=0\n\nwhere Co= c,, =0.5, and ci 1, for l<=j<-m-1. Here m'-Zmax/AZ, where Zma is the maximal z, for which computational points were found in the region Ix-Xo [ =< hi, and   Az was chosen to be 0.004. The relative error in the drag I(D(xo)-Do(xo))/Do(xo)l for Xo 1 is given in Table 1. In addition, to measure the intensity of the noise from the statical process, we averaged the computed drag every 10 iterations, i.e.,\n\nDavg -Dcom(t rt At) n=0 and calculated the variance of the instantaneous drag from the averaged one. The\n\nTABLE Grid (a) (b) (c) Relative drag error 0.52 0.21 0.14 Variance 0.061 0.024 0.016 No. of sheets 95 139 344 No. of blobs 76 151 415 Time 3 min. 13 min. 127 min.\n\nvariance of the drag is given by the following formula: (6.3)\n\nwhere E(X) is the expected value of a random variable X. We approximated the expected values E(X) in (6.3) Xavg, where the average is computed as in (6.2). We would like to reduce the statistical noise, and therefore to decrease the variance by choosing the appropriate parameters. The results for the drag and variance in the two-dimensional problem are given in Table 1. The total computational time on a VAX-VMS computer is given in this table as well.\n\nThe dominant term of the error, as seen by the convergence analysis, is the one due to random walk. This error is of order 1/v/if, where n is the number of sheets or blobs. When we refined grid (a) to (b), we approximately doubled the number of computational elements, so that the error should decrease by a factor of x/. The computational factor is found to be bigger than two. If we look at grid (c) compared to (b), the number of sheets or blobs was increased by a factor of three approximately, so that the error should decrease by a factor of x/, which is approximately 1.7. The computed factor was found to be 1.5. From Table 1 we can learn that the finer the grid, the smaller the relative error in the drag, and the smaller the variance. In addition, much more time is required for grid (c) than for grid (b). To make our computations affordable for a longer time in the three-dimensional problem, we chose the three- dimensional grid (b). We also had to specify h2 for three-dimensional problems. We chose h2 q/4 for grid (a), h2 q/6 for grid (b), and h2 q/8 for grid (c).\n\nWe examined the instability of the Blasius solution for high Reynolds numbers in a three-dimensional problem. This was done as follows (see 11 ]). For 0 =< _-< T we approximated the Prandtl equations, whose steady-state is the Blasius solution, using only tiles. Note that instability does not occur for the Prandtl equations, whereas it might occur for the Navier-Stokes equation. The numerical solution converges to the Blasius solution as c and hi, h2 0, where hi, hz is the size of the initial grid.\n\nWe used the results of this scheme at T= 1 to be the initial conditions for the Navier-Stokes equations. Instability for the Navier-Stokes equations is shown, i.e., small perturbations in the Blasius solution cause large changes in the solution. We perturbed the Blasius solution by choosing the following initial condition at infinity\" u(x, y, , T)= f ( U, A, 0) (u,0,0)\n\nfor 1/4q < y < q, elsewhere, where A 10-3. After T 1 we used the scheme described in 3 and 4, in which tiles and blobs are present, and therefore instability might occur. We display all the results at 22.5. Velocity and vorticity are shown in the following two-dimensional planes: (a) y =1/2q, which describes the flow quantities as a function of x and z; (b) at the two planes x 1, 1.4, which shows the velocity and vorticity as a function of y and z. Note that as x increases the more apparent are the three-dimensional features, i.e., the dependence on y and the transition to turbulence.\n\nThis happens since the local Reynolds number Rx Ux/L increases for larger x.\n\nIn Figs. 1-3 we display velocity components computed at a regular mesh. Figure 1 shows the x, z components of the velocity at y q/2. In Figs. 2-3 the y, z components of the velocity at x 1, 1.4, respectively, are displayed. These figures, as well as other FG. 1. Velocity field in the x, z plane for y q/2. figures represented for fixed x, show the three-dimensional features of the flow, i.e., the dependence on y. This is in accordance with results appearing in [35] and [36];\n\nin the latter numerical results were performed for a periodic problem in both x and y. They indicate the three-dimensional character of secondary instability, which is consistent with the idea that turbulence is intrinsically three-dimensional. Vorticity is represented in the Lagrangian computational grid points in Figs. 4-6. In Fig. 4 the x, z components of vorticity at y-q/2 is displayed. We can see that for larger x the intensity of the vorticity increases, which is one of the features of transition to turbulence, i.e., vorticity is no longer preserved in the Lagrangian system as it is in a two-dimensional problem. In Figs. 5-6 we show the y, z components of vorticity at x-1, 1.4, respectively. Note that for larger x the vorticity is no longer directed in one direction. This is in agreement with the results in [25], which indicate the appearance of small hairpins as the flow develops in the streamwise direction. Figures 789show contours of the z-component of vorticity. These figures indicate that for larger x small scale phenomena appear. Figures 101112show contours of the y-component of vorticity, in which the results are similar to those of the z-component of vorticity.\n\nIn Tables 2 and 3 we show the averaged drag (multiplied by a factor of 100), the thickness of the boundary layer and the drag variance for y q/2, x 1 and y q/2, x 1.4, respectively, and for different time levels. The averaged drag and variance were calculated in the same way as for the two-dimensional problem. The boundary layer thickness is given by Thickness (x, y) Uu(x, y, z)) dz, and is computed for y q/2. The integral is discretized by the trapezoidal rule.\n\nWe notice that the drag grows until it reaches a certain level at about 6 and then stabilizes. As time progresses the variance at x 1 also stabilizes and stays at a 0.5 0.6 0.8 0.7 FIG. 4. Vorticity in the x, z plane for y q/2. FIc,. 5. Vorticity in the y, z plane for x 1.\n\n0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 O. I0 FIG. 6. Vorticity in the y, z plane for x 1.4. Oi O.O01. .2 01.3 014 01.5 01.8 0'.7 0'.8 01.9 |.0 1.| 11.2 11.3 11.4 11.5 1.6 1.7 FIG. 7. Contours of the z component of vorticity in the x, z plane for y q/2. FIG. 8. Contours of the z component of vorticity in the y, z plane for x 1. o.oo o'.o o'.o o'.o o'.o o'.o olo o.o olo olo FIG. 9. Contours of the z component of vorticity in the y, z plane for x 1.4. 0.00.1 0.2 0.3 0. O.S 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.1 1.5 1.6 1.7 FIG. 10. Contours of the y component of vorticity in the x, z plane for y q/2.\n\n0.00 o.ot 0.02 0.03 0.04 o.os 0.06 0.07 0.08 0.09 0.0 FIG. 11. Contours of the y component of vorticity in the y, z plane for x 1. 0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 O. I0 FIG. 12. Contours of the y component of vorticity in the y, z plane for x 1.4.  level of about 0.01. However, the variance at x 1.4 changes in time and starts to grow as time progresses. Therefore, we notice that the flow downstream is changing more rapidly in time. The thickness of the boundary layer increases as time progresses until it reaches a certain level and then starts to oscillate rapidly, especially at x 1.4. If we compare the thickness of the boundary layer at x to the one at x 1.4, we notice that this quantity grows as we proceed in the downstream direction.\n\nIn Figs. 13-15 we show the u component of the velocity as a function of the similarity variables yx/U/x. In every graph we display the velocity at both x 1 and x 1.4. Figures 13,14  FIG. 16. u-component of the velocity at x 1, at =6, (2)--at 12,/-at 22.5.\n\ncan learn from these figures that the velocity varies with x, whereas in Blasius's solution the solution is a function of r/ only. In Figs. 16-17 we show the same quantity u as a function of r/, but now several time levels are shown in Fig. 16 for x 1 and in Fig. 17 for x 1.4. We can learn from Figs. 16-17 that the flow quantities oscillate more in time when we proceed in the streamwise direction. This is explained by the growth of the local Reynolds number. Table 4 gives the running times on a CRAY X-MP for the three different grids, and for different time levels. Tables 5 and 6 show the number of tiles and blobs, respectively, for various times (t 3, 6, 9, 12, 22.5.) and grids (a, b, c). We found that our numerical results agree with the experimental results of [25] in a way that both results indicate the existence of small hairpins at high Reynolds numbers. Note that in other experiments horseshoe vortices rather than small hairpins were found. As was explained in [25], the reason for the different results was that the experimental techniques of other investigators limited the results to low Reynolds numbers.\n\n7. Conclusions. The three-dimensional version of vortex methods used here were capable of resolving the three-dimensionality of the flow and the transition to tur-\n\nTABLE 4\n\nTotal computational time to reach 3, 6, 9, 12, 22.5. Grid (a) (b) (c) t=3 0.5 min 7 min 2 h 30 min t=6 min 25 min t=9 2 min 43 min t=12 3 min h 7 min =22.5 6 min 2 h 13 min Grid (a) (b) (c) TABLE 5 Number of tiles. t=3 263 1,080 4,548 323 962 t=9 344 1,000 t=12 360 926 22.5 348 1,098 grid (a) (b) (c) TABLE 6 Number of blobs. t=3 205 1,051 6,948 t=6 213 915 t=9 187 830 t=12 183 947 22.5 222 987\n\nbulence. Away from the plate, we used a three-dimensional blob method, which is a natural extension of two-dimensional vortex methods. These methods can have high spatial accuracy, and they involve no elaborate calculation. Near the plate, the tile method approximates a thin boundary layer, and is a straightforward extension of the two-dimensional sheet method. Therefore the two-dimensional and the three- dimensional problems can be similarly treated numerically."
}