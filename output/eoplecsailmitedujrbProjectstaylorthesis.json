{
    "title": "Simultaneous Localization and Tracking in Wireless Ad-hoc Sensor Networks",
    "publication_date": "2005-05-06",
    "authors": [
        {
            "full_name": "Christopher J Taylor",
            "firstname": "Christopher J",
            "lastname": "Taylor",
            "affiliations": [
                {
                    "organization": "the Massachusetts Institute of Technology",
                    "address": {}
                },
                {
                    "organization": "the Massachusetts Institute of Technology",
                    "address": {}
                }
            ]
        },
        {
            "full_name": "Jonathan Bachrach",
            "firstname": "Jonathan",
            "lastname": "Bachrach",
            "affiliations": [
                {
                    "organization": "the Massachusetts Institute of Technology",
                    "address": {}
                },
                {
                    "organization": "the Massachusetts Institute of Technology",
                    "address": {}
                }
            ]
        }
    ],
    "abstract": "In this thesis we present LaSLAT, a sensor network algorithm that uses range measurements between sensors and a moving target to simultaneously localize the sensors, calibrate sensing hardware, and recover the target's trajectory.\nLaSLAT is based on a Bayesian filter that updates a probability distribution over the parameters of interest as measurements arrive. The algorithm is distributable and requires a fixed amount of storage space with respect to the number of measurements it has incorporated. LaSLAT is easy to adapt to new types of hardware and new physical environments due to its use of intuitive probability distributions: one adaptation demonstrated in this thesis uses a mixture measurement model to detect and compensate for bad acoustic range measurements due to echoes.\nWe present results from a centralized implementation of LaSLAT using a network of Cricket sensors. In both 2D and 3D networks, LaSLAT is able to localize sensors to within several centimeters of their ground truth positions while recovering a range measurement bias for each sensor and the complete trajectory of the mobile.",
    "full_text": "First and foremost I would like to thank Ali Rahimi, who has been an inexhaustible source of instruction and concrete good ideas throughout the year. It is fair to say that I could not have done this without his help.\n\nI also want to thank my advisor, Jonathan Bachrach, who gave me the chance to tackle a difficult problem and helped me stay focused and on target. He also made sure I had resources when I needed them, and did the legwork to acquire Cricket hardware for me, often on short notice.\n\nAnd of course, thanks to Jonathan and Vijay Raghavan, our DARPA program manager, for formulating the simultaneous localization and tracking problem. Without their inspiration I would never have stumbled upon this topic.\n\nI also appreciate the efforts of two UROPs in my group, Tony Grue and Tom Hsu, who, along with Jonathan, came in on nights and weekends to help me set up and conduct experiments when the lab was empty. Measuring sensor positions with a tape measure is a labor-intensive and unpleasant process -our struggles provide all the motivation this thesis requires. I am grateful to DARPA for funding this research under contract number F33615-01-C-1896.\n\nFinally, thanks to my parents and fiancee Jennifer for their support, understanding, and encouragement throughout the process. They suffered my complaints when nothing was working and suffered my delusions of grandeur when everything was.\n\nThis thesis presents LaSLAT, an algorithm for localizing and calibrating a sensor network while simultaneously tracking a moving target. LaSLAT performs these tasks using range measurements between the sensors and the target. LaSLAT does not require sensor nodes with known positions, ranging information between sensors, or constraints on the path of the target.\n\nMany sensor network applications require that the locations of the individual sensors be known, since sensor readings are in general of little use without geographic context. However, the same attributes that make sensor networks attractive make obtaining this information difficult. By placing a large number of relatively cheap sensors, it is possible to obtain many accurate measurements from sensors close to phenomena of interest; however, the sheer number of sensors and the need to minimize costs precludes manually recording the sensors' locations. It also precludes brute force solutions such as equipping each sensor with a GPS unit.\n\nConsequently, we would like the sensors to determine their own positions after placement. This is known as localization, and is typically achieved by having each sensor compute range measurements to its neighboring sensors, then algorithmically embedding the graph formed by these ranges into a coordinate system (see chapter 2). This coordinate system is then used to perform location-dependent tasks such as geographic packet routing or target tracking.\n\nLocalization is often complicated by the difficulty of obtaining enough accurate pair-wise range measurements between sensors. Inter-sensor ranges can be corrupted by noise or lost entirely due to occluded line-of-sight. Thus, consistently accurate localization requires robustness in the face of missing or low quality measurements.\n\nNevertheless, localization is rarely if ever the purpose of a network. Sensor networks are typically deployed to observe active phenomena in the environment, and require accurate localization as a means to that end. As a result, there is pressure in localization research to achieve accuracy and robustness using as little hardware as possible.\n\nTarget tracking is one of the motivating localization-dependent applications of sensor networks. In tracking applications, sensors jointly observe phenomena, which may be people or objects passing through the network or physical effects such as bullet shock-waves or anomalous sounds. Once a phenomenon is detected, the sensors collaborate to determine its spatial location. This estimate is reported to a computer or person monitoring the network. Target tracking networks can provide indoor navigation services to hand-held users or mobile robots, track friendlies and hostiles on a battlefield, or monitor movement of inventory in a store or warehouse.\n\nTracking is a well-understood problem (see chapter 2). Given the locations of the sensors and accurate range information to the target, it is straightforward to determine the target's position. Consequently, traditional tracking applications tend to be split into two separate phases. First, the network is localized using a specialized algorithm. After localization completes, the network enters a target tracking phase in which target positions are estimated based on the discovered sensor positions.\n\nIn an ideal world, sensors would arrive from the factory fully calibrated to begin taking accurate measurements of their surroundings. However, this ideal situation is rarely achieved. For instance, deployment conditions such as temperature affect the accuracy of ranging algorithms based on acoustic time-of-flight by altering the speed of sound. Furthermore, as shown in [35], differences between sensors can also result in mis-calibrations that are difficult to correct before deployment. Calibration in the field can therefore offer meaningful improvement in both localization and target tracking accuracy. As with localization, there is considerable economic incentive to develop auto-calibration algorithms that allow sensors to self-calibrate in the field without external intervention.\n\nFor sensor networks deployed to track moving targets, some authors have suggested using a moving target (or mobile) to assist in localizing the network [8,12,27]. This approach is attractive for several reasons:\n\n• It requires no additional localization-specific hardware on the individual themselves, potentially reducing both their size and cost.\n\n• Unlike sensors, a mobile can move freely in the network. This provides a larger number and a greater diversity of measurements for use in localization, which helps reduce the effect of noisy measurements and static environmental obstacles.\n\n• Use of a mobile means that the sensors are no longer constrained to have line of sight to each other. This enables a broader range of network deployments: in particular, it allows sensors to be placed to optimize tracking coverage rather than to facilitate localization. This is especially significant because many types of ranging hardware are directional. Traditional localization algorithms there-fore introduce a deployment conflict: sensors must be oriented so that they can range to several other sensors in addition to observing areas where targets are likely to appear. This wastes sensing resources and limits deployment options.\n\nSLAT eliminates this problem, since it works best when sensors use their full field of view to sense targets.\n\n• Localization using a mobile potentially allows localization estimates to continuously improve, even after the network begins tracking targets. In particular, sensors that are closest to high traffic areas can be localized very precisely. In turn, this facilitates high precision target tracking in these areas.\n\nExisting methods fail to realize the full potential of mobile-based localization.\n\nIn particular, most require that the position of the mobile be known at all times.\n\nConsequently, the mobile must be constrained to a well-known trajectory or equipped with a GPS-like system. Furthermore, existing methods ignore the sensor calibration problem entirely.\n\nWe consider a more general scenario, in which the mobile is allowed to move arbitrarily on an unknown path. As it moves, the mobile periodically emits a signal that allows sensors in the network to compute their range to the mobile. These ranges are expected to be corrupted by noise. Using solely these noisy range measurements, the objective is to localize the sensors in the network, calibrate the sensors' ranging hardware if necessary, and track the position of the mobile. Accordingly, we label this problem Simultaneous Localization and Tracking (SLAT).\n\nOur solution to the SLAT problem takes the form of a Bayesian filter. The filter uses range measurements taken by the network to update a joint probability distribution over the positions of the sensors, the trajectory of the mobile, and the calibration parameters of the network. To avoid some of the representational and computational complexity of general Bayesian filtering, we use Laplace's method to approximate our state with a Gaussian after incorporating each batch of measurements. As a result, we call our algorithm LaSLAT.\n\nLaSLAT inherits many desirable properties from the Bayesian framework. The probabilistic model used in LaSLAT insures that measurement noise is averaged out as more measurements become available, which improves localization and tracking accuracy in high-traffic areas. The filtering framework incorporates measurements in small batches, providing on-line estimates of all locations, calibration parameters, and their uncertainties. This allows the mobile to be tracked in near real-time. It also speeds up the convergence of the algorithm and reduces impact on the network.\n\nSince LaSLAT maintains estimate uncertainties, mobiles can be dispatched on-line if desired to improve localization estimates in regions where localization uncertainty is high. As we required in the problem statement, mobiles may move arbitrarily through the environment, with no constraint on their trajectory or velocity. Furthermore, multiple mobiles may be used in conjunction to expedite initial localization.\n\nIf available, ancillary localization information such as position estimates from GPS, anchor nodes, or radio-based ranging can be easily incorporated into our framework. Our algorithm avoids expensive matrix operations by operating on sparse inverse covariance matrices rather than operating directly on dense covariance matrices. This helps LaSLAT run quickly and facilitates performing the LaSLAT computations distributedly in the network.\n\nThe user deploying the network may specify a coordinate system for LaSLAT to honor when localizing sensors. If no coordinate system is specified, LaSLAT recovers locations in a coordinate system that is correct up to a translation, rotation, and possible reflection.\n\nWe demonstrate these features by accurately localizing a dense network of 27 sensors to within one or two centimeters. The sensor nodes are wireless Crickets [1] capable of measuring their distance to a moving beacon using a combination of ultrasound and radio pulses. In a larger and sparser network, we localize sensors to within about eight centimeters. In both cases, a measurement bias parameter is accurately calibrated for all nodes. Finally, we present results from two experiments in three dimensions, in which nodes were localized to within seven centimeters.\n\nLocalization is a well established problem in sensor networks, and many approaches have been developed in the literature. The vast majority of these techniques treat localization as a stand-alone procedure that takes place in advance of or concurrently with other operations in the network. In the traditional localization problem, sensors are capable of determining the distance between themselves and other nearby sensors.\n\nThis may be done using relatively accurate methods such as acoustic time-of-flight (TOF), or using imprecise but cheap methods such as radio signal strength indicators (RSSI). In dense networks, radio hop count (DV) may be used as a surrogate for distance.\n\nSeveral authors [10,17,31] have used multidimensional scaling (MDS) as a localization technique. MDS is very effective at recovering sensor topologies when accurate distances are available between all pairs of sensors. Its performance degrades substantially when some distances are unavailable.\n\nMany algorithms [4,5,20,23,25,30,32] also depend on the presence of anchor nodes, which are sensors that know their true locations a priori through out-of-band means such as pre-programming or GPS. These algorithms localize non-anchor nodes by construction using distances from each non-anchor node to several anchor nodes.\n\nHowever, anchor nodes are expensive, and not always perfectly accurate (i.e. GPS).\n\nFurthermore, many of these algorithms suffer from propagation of errors: sensors several hops from a beacon often accumulate considerable position error. Priyantha et al. [29] suggest a two-phase approach that is similar in some ways to the approach proposed in this thesis. An initialization phase uses an imprecise technique based on radio connectivity between nodes to embed the sensors in a plane.\n\nOnce initialization is complete, a second phase uses precise time of flight ranges between adjacent sensors to make local position adjustments.\n\nIhler et al. [16] treat localization as an inference problem on a graphical model. This allows them to use nonparametric belief propagation (NBP) to produce an estimate of sensor positions. This offers several advantages, many of which are also offered by our LaSLAT technique. NBP allows the use of non-Gaussian measurement models. It also produces an uncertainty measure that provides a context for use of its sensor position estimates.\n\nA number of authors [7,21,22,24,31] have proposed algorithms based on coordinate system stitching. These algorithms follow a three step divide-and-conquer process.\n\nFirst, the network is split into small overlapping subregions. Next, each subregion computes a local map, which is simply an embedding of the subregion in a relative coordinate system. Finally, adjacent subregions are registered into a common coordinate system using the overlapping nodes between local maps. By performing registration recursively, all the subregions are incorporated into a single global coordinate system. Moore et al. [22] suggest a particularly sophisticated approach to subregion formation, in which the subregions are chosen based on their likelihood of forming accurate local maps. This technique has the advantage of producing a more homogeneous accuracy level across the network. However, it achieves this by refusing to localize sensors that cannot be positioned using pair-wise ranges to nearby nodes. This illustrates a fundamental problem with localization based on inter-sensor ranges: the limited availability of inter-sensor range data means that some sensors may prove impossible to accurately localize. The advantage of simultaneous localization and tracking (SLAT) is that these nodes may become localizable in the future after additional sightings of the mobile. Furthermore, SLAT offers highest accuracy where mobiles move most frequently, whereas inter-sensor range-based algorithms typically offer highest accuracy where sensor density is greatest or in areas where ranging between sensors is easiest. In an ideal world, these regions would coincide, but in an ad-hoc deployment, this may not be the case.\n\nLike localization, target tracking is a well established problem in sensor networks.\n\nHowever, most literature on the subject assumes that localization information is available before tracking begins. As a result, most of the literature on tracking considers cluster formation [9], power economy [36], or related problems such as target identification and classification [3].\n\nIn this thesis, we assume that targets are easy for sensors to identify, allowing us to focus purely on tracking. This is reasonable in any circumstance where the targets are tracked voluntarily -for instance when the network is guiding a mobile robot or providing in-building location information to a hand-held computer user. We also ignore concerns such as power conservation, and focus instead on what information can be extracted from sensor measurements once they are obtained.\n\nSeveral authors [6,35] have researched automatic calibration in sensor networks. Bychkovskiy et al. [6] calibrate photo-sensors in a dense network by making use of the fact that adjacent sensors are likely to observe the same level of stimulus.\n\nThe most directly relevant work to this thesis is the Calamari Ad-hoc Localization System by Cameron Whitehouse [35]. Calamari uses acoustic time difference of arrival (TDoA) ranging between sensors to perform localization. Whitehouse showed that post-deployment calibration of the acoustic sensors dramatically improved localization accuracy. He also developed a macro-calibration technique in which individual sensor parameters are chosen to optimize the performance of the network as a whole.\n\nVarious authors have used mobiles to localize sensor networks [8,12,[26][27][28], but these methods assume the location of the mobile is known. One exception is [12], which builds a constraint structure as measurements become available. Compared to [12], we employ a very extensible statistical framework that allows more realistic measurement models. Priyantha et al. [28] show how to guide a mobile to form rigidly localizable structures. Our problem differs from the one discussed in [28] in that we make no assumptions about the trajectory of the mobile.\n\nOur method is most similar to [26], which used an Extended Kalman Filter (EKF) to track an underwater vehicle while localizing sonar beacons capable of measuring their range to the vehicle. We replace the EKF's approximate measurement model with one based on Laplace's method. This provides faster convergence and greater estimation accuracy. We also demonstrate that the Bayesian filtering framework can calibrate the sensor nodes, and that the computation is capable of distributing over the sensor nodes in a straightforward way.\n\nThe SLAT problem is similar to SLAM and the 3D Structure from Motion (SFM) problem in computer vision. In these problems, two sets of unknown variables are coupled in such a way that jointly estimating the two sets is relatively difficult, while estimating one set with the other set given is relatively easy. In sensor network localization, knowing the position of the nodes significantly simplifies tracking, and knowing the position of the mobile significantly simplifies localization. In SLAM and SFM, this relationship holds between the pose of the robot or camera and that of features in the scene.\n\nOur solution to SLAT adopts various important refinements to the original Extended Kalman Filter (EKF) formulation of SLAM [33]. LaSLAT processes measurements in small batches and discards variables that are no longer needed, as demon-strated by McLauchlan [19]. Following [34], LaSLAT operates on inverse covariances of Gaussians rather than on covariances directly to accelerate updates and facilitate distributed computation.\n\nLaSLAT uses a Bayesian filtering framework. Under this framework, as each batch of measurements becomes available, it is used to update a prior distribution over sensor locations, the mobile trajectory, and various sensing parameters. The resulting posterior distribution is then propagated forward in time using a dynamics model to make it a suitable prior for use with the next batch of measurements.\n\nIn LaSLAT, after incorporating each batch of measurements the posterior distribution is approximated with a Gaussian using Laplace's method [13]. Consequently, the amount of state saved between batches is constant with respect to the number of measurements taken in the past. The Gaussian approximation also simplifies propagation using the dynamics model and incorporation of the next batch of measurements.\n\nAs the mobile moves through the network, it periodically emits events which allow some of the sensors to measure their distances from the mobile. Let e j denote the location of the mobile when it generated the jth event. The tth batch e t is a collection of consecutive events e t = {e m . . . e m+n }, with e t j denoting the jth event in the tth batch. Each LaSLAT iteration incorporates the measurements from a single batch of events.\n\nLet s i = s x i s θ i represent the unknown parameters of sensor i, with s x i denoting the sensor's position and s θ i its calibration parameters. Then s = {s i } is the set of all sensor parameters. The scalar y t ij denotes the range measurement between sensor i and the jth event in batch t, so y t = {y t ij } is the collection of all range measurements in batch t.\n\nFor each batch t, e t and s are the unknown values that must be estimated. We aggregate these unknowns into a single variable x t = s e t for notational simplicity.\n\nNote that as defined, e and s x may be vectors of either 2D or 3D points, allowing LaSLAT to be run easily in either two or three dimensions.\n\nThe Bayesian filtering framework is a non-linear, non-Gaussian generalization of the Kalman Filter. For each batch t, it computes the posterior distribution over sensor parameters, s, and events locations, e t , taking into account all range measurements taken so far:\n\nIn LaSLAT, we wish to update this distribution as range measurements become available, and discard measurements as soon as they have been incorporated. To do this, one can rewrite the distribution in terms of a measurement model and a prior distribution derived from the results of the previous iteration. Rewriting p(x t |y 1 , y 2 , . . . , y t ) as p(x t |y old , y t ), we get by Bayes' rule:\n\nwhere proportionality is with respect to x t . The final equality follows because when the sensor and mobile locations are known, the past measurements do not provide any additional useful information about the new batch of measurements. The distribution p(y t |x t ) is the measurement model: it reflects the probability of a set of observations given a particular configuration of sensors and event locations (Section 3.2).\n\nThe distribution p(x t |y old ) summarizes all information collected prior to the cur-rent batch of measurements, in the form of a prediction of x t and an uncertainty measure. It can be computed from the previous estimate, p(x t-1 |y old ), by applying a dynamic model:\n\nThe distribution p(x t |x t-1 ) models the dynamics of the configuration from one batch to another by discarding old event locations and predicting the locations of new events (Section 3.4).\n\nWhen the measurement model p(y t |x t ) is not Gaussian, the updates (3.1) and\n\n(3.2) become difficult to compute. We handle the non-Gaussianity of the measurement model by approximating the posterior p(x t |y old ) with a Gaussian distribution q(x t |y old ) using Laplace's method (Section 3.3). This Gaussian becomes the basis for the prior distribution for the next batch. q is much simpler to save between batches than the full posterior -in particular, it allows all the old measurements to be discarded. Table 3.1 summarizes the steps of LaSLAT.\n\nOther approximate Bayesian filters such as the Extended Kalman Filter (EKF) or particle filters could also be used in place of our Laplacian method. The EKF differs from our algorithm because it does not perform a full optimization when incorporating each event. In many cases this is a helpful optimization; however, as we show in chapter 6, on the SLAT problem it sacrifices accuracy and speed of convergence.\n\nParticle filters allow a closer approximation of the posterior distribution, especially when the distribution is multi-modal. However, our algorithm seems to perform well in practice while requiring significantly less computation.\n\nNew measurements influence localization and calibration estimates via the measurement model. A measurement model is a probability distribution p(y t |x t ) over a batch of range measurements, given a particular choice of the calibration parameters and 1. Observe a new batch of measurements y t .\n\n2. Represent the posterior p(x t |y t , y old ) in terms of the prior p(x t |y old ) and the measurement model p(y t |x t ) using Equation (3.1).\n\n3. Using Newton-Raphson [14], compute curvature at the mode of p(x t |y t , y old ) and use it to construct the approximate posterior q(x t |y t , y old ). This posterior is the estimate for the batch t (Section 3.3).\n\n4. Compute the prediction p(x t+1 |y t , y old ) using q(x t |y t , y old ) (Section 3.4).\n\n5. Using the prediction as the new prior, return to step 1 to process batch t + 1.\n\nTable 3.1: One iteration of LaSLAT. Incorporates batch t and prepares to incorporate batch t + 1. positions for the sensors and the mobile. One advantage of the LaSLAT framework is that this measurement model can be tailored to specific measurement hardware and deployment parameters. The measurement model encapsulates details such as the kind of data being observed (angle of arrival, distance, radio signal strength, etc), as well as the types of noise that are possible in the environment.\n\nIn this thesis, we develop a measurement model that reflects the characteristics of the popular acoustic time difference of arrival (TDoA) ranging technique. In most TDoA implementations, the transmitter (in this case the mobile) emits a tagged radio message, then a short time later produces an acoustic signal. Upon hearing the radio message, the sensors in the network activate their microphones and listen for the arrival of the acoustic signal. Once the acoustic signal arrives, the sensors use the difference in arrival time between the acoustic signal and the radio message to estimate the distance between the sensor and the transmitter.\n\nThis technique can be quite accurate, especially when line-of-sight exists between the transmitter and the receiver. The Cricket ranging system [1], which uses a single inaudible ultrasound pulse, can measure distances up to ten meters with error as small as 1-2 centimeters.\n\nHowever, TDoA measurements are susceptible to several types of error. First, various random delays in the ranging process introduce small (sub-centimeter) errors, which take the form of a variance from measurement to measurement. Second, mis-calibration can result in a measurement bias. For instance, temperature or humidity can cause the actual speed of sound to be different from the pre-calibrated constant used by the sensor. The measurement bias can easily vary from deployment to deployment, making accurate pre-calibration at the factory nearly impossible. In the Cricket ranging system, we have observed biases of between 3 and 10 centimeters. The biases vary only slightly from sensor to sensor, but are typically consistent throughout a deployment area. Finally, TDoA measurements can be vulnerable to both echoes and ambient noise. In both cases errors occur because the time of flight observed by the sensor does not correspond to the straight line distance from the sensor to the event; instead, it corresponds to a longer path (in the case of an echo),\n\nor no path at all (in the case of an ambient noise). In one test environment, a security system produced 40 kHz ultrasound that occasionally interfered with the Crickets' ranging system.\n\nIn this section, we ignore echo effects, and assume that each measurement is a corrupted version of the true distance between the event and the sensor that took the measurement:\n\nwhere • indicates the vector 2-norm, giving the Euclidean distance between s x i and e t j . ω t ij is a zero-mean Gaussian random variable with variance σ 2 , and s θ i is a bias parameter that models an unknown shift due to sensor mis-calibration. In section 4.1 we present a richer model that performs better in the presence of echoes.\n\nAs defined in equation (3.3), p(y t ij |s i , e t j ) is a univariate Gaussian with mean s ie t j + s θ i and variance σ 2 . Since each measurement y t ij depends only on the sensor s i that took the measurement and the location e t j of the mobile when it generated the event, the measurement model factorizes according to\n\nwhere the product is over the sensors and the events that they perceived in batch t.\n\nEquation (3.4) is the complete measurement model for a batch of measurements.\n\nThough LaSLAT is designed to operate in their absence, LaSLAT can make use of inter-sensor range measurements if they are available. These can be encoded using a generative model similar to equation (3.3):\n\nwhere s k and s l are the sensor pair that generates the inter-sensor range measurement y t kl , and ω t kl is additive zero-mean Gaussian noise. The resulting probability distribution p(y t kl |s k , s l ) becomes an additional factor in the product (3.4). This demonstrates the ease with which LaSLAT can rigorously incorporate additional sources of localization information.\n\nThe measurement model derived in the last section can be combined with a prior distribution p(x t |y old ) using equation (3.1) to find the posterior distribution p(x t |y old , y t ). This posterior has no compact representation -in particular, it takes up space proportional to the total number of measurements observed by the network since the first batch. To curb this complexity, we save only a Gaussian approximation of the posterior. This Gaussian representation requires constant space with respect to the number of measurements observed, which allows LaSLAT to run indefinitely without requiring additional memory. It also has the advantage of being easy to distribute across the sensor network (chapter 5). This approximate Gaussian posterior q(x t |y old , y t ) can be obtained from the prior distribution p(x t |y old ) and the measurement model p(y t |x t ) using Laplace's method [13].\n\nTo fit an approximate Gaussian distribution q(x) to a distribution p(x), Laplace's method first finds the mode x * of p(x), then computes the curvature of the negative log posterior at x * .\n\nThe mean and covariance of q(x) are then set to x * and Λ respectively. Notice that when p is Gaussian, the resulting approximation q is exactly p. For other distributions, the Gaussian q locally matches the behavior of p about its mode.\n\nThe mode finding problem can be expressed as:\n\nwhere µ = E x t |y t , y old , and Ω x = Cov -1 x t |y old .\n\nWe use the Newton-Raphson iterative optimization algorithm [14] to find the mode x t * and the curvature H (Appendix B). Following Laplace's method, the mean E x t |y old , y t of q is set to x t * and its inverse covariance Cov -1 x t |y old , y t is set to H.\n\nRepresenting q using its inverse covariance allows us to avoid computing the matrix inverse H -1 after adding each measurement, which significantly improves performance and facilitates a distributed implementation of our algorithm (Chapter 5).\n\nThe Gaussian approximation described in this section works well when the posterior distribution has a single strong mode. However, when the posterior contains several equally probable modes, the Gaussian approximation effectively discards all but one. Consequently, this algorithm is vulnerable to substantial errors when the measurements and prior do not favor a unique estimate. This can occur if the mobile does not move very much during a batch and the prior distribution is mostly uninformative. In that case, the Gaussian approximation risks committing too quickly to a particular parameter estimate. In our experience, this problem can be avoided by using larger batch sizes when the prior's covariance is large. It can also be solved by using a Gaussian mixture model or a particle filter to approximate the posterior distribution between batches. These alternatives are able to fit a multi-modal posterior; however, they are more complex and consequently require greater computational power to manipulate.\n\nIn this thesis, we assume mobiles can move arbitrarily and that sensors are stationary.\n\nWhen propagating the posterior q(x t |y old , y t ) forward in time, we need only retain the components that are useful for incorporating the next batch of measurements.\n\nThus, we may remove the estimate of the mobile's trajectory from batch t, but we must incorporate a guess for the mobile's path during batch t + 1. Therefore, the prediction step of Equation (3.2) can be written:\n\np(x t+1 |y old , y t ) = p(s, e t+1 |y old , y t ) = p(e t+1 )q(s|y old , y t ) (3.7)\n\nq(s|y old , y t ) = e t q(x t |y old , y t ) de t .\n\nThe Gaussian q(x t |y old , y t ) captures the posterior distribution over sensor locations given all measurements taken so far, and has already been computed by the method of section 3.3. We obtain q(s|y old , y t ), by marginalizing out the mobile's trajectory during batch t.\n\nThe prior p(e t+1 ) is Gaussian with very broad covariance, indicating that the future trajectory of the mobile is unknown. In some applications, it may be possible to use past trajectories to make better guesses for e t+1 . For example, p(e t+1 ) could be used to require events to form a smooth path. This can help accurately position events with few quality measurements. For maximum generality, we will not attempt to do so in this section, meaning that the mobile is allowed to move arbitrarily between events. In section 4.2, we present a method of requiring that events follow a smooth trajectory.\n\nThe operations of Equation (3.7) can be carried out numerically by operating on the mean and inverse covariance of q(x t |y old ). First, partition according to s and e t :\n\nMarginalizing out e t produces a distribution q(s|y old ) whose mean is the s component of the mean of q(x t |y old ) and whose inverse covariance is:\n\nThe parameters of p(x t+1 |y old ) are those of q(s|y old ), augmented by zeros to account for an uninformative prior on e t+1 :\n\nThe components of the inverse covariance of p(x t+1 |y old ) corresponding to e t+1 are set to 0, corresponding to infinite variance, which in turn captures our lack of a priori knowledge about the location of the mobile in the new batch. The mean is arbitrarily set to 0. If some information is known a priori about e t+1 , then the 0 components of E x t+1 |y old and the bottom right 0 components of Cov -1 x t+1 |y old can be used to capture that knowledge.\n\nPrior information about the sensor parameters is easy to incorporate into LaSLAT.\n\nSuch information might be available because the sensors were placed in roughly known positions, or because another less accurate source of localization is available. Prior information may also be used to define LaSLAT's global coordinate system, by fixing the relative positions of several sensors. In addition, calibration in the factory might supply prior information.\n\nIf such prior information is available it can be supplied as the prior when incorporating the first batch of measurements. We set the covariance of this prior to σ 0 I, with σ 0 a large scalar, which makes the prior diffuse. The large covariance allows measurements to override the positions prescribed by the prior, but provides a sensible default when few measurements are available. The mode of this prior (or for subsequent iterations, the mode of p(s|y old )) is also used as the initial iterate for the Newton-Raphson iterations. To obtain the initial iterate for an event, we use the average estimated location of the three sensors with the smallest range measurements to the event.\n\nIn our experiments, we utilize the radio connectivity of the sensors to obtain prior localization information. The initialization step described by Priyantha et al. [29] (see Appendix A) provides rough position estimates to serve as a prior before any measurements are introduced. This prior takes the form p(s\n\nwhere x 0 i is the position of the ith sensor as predicted by the initialization step and σ 0 is a large variance.\n\nWe have observed empirically on Cricket hardware [1] that though measurement biases vary between deployments, they tend to be fairly consistent from sensor to sensor. This information can be used as a prior over the sensor measurement biases s θ i . We encode this information as a distribution with the form p(s\n\n, where the summation is over sensors that are in close proximity to each other, and σ b is a constant used to tune the impact of this prior on the measurement biases. This illustrates a important attribute of LaSLAT: it is easy to add platform-specific optimizations to improve performance. In many localization algorithms this is impossible: a change in hardware or deployment environment often necessitates a completely new approach.\n\n170 180 190 200 210 220 230 240 250 0 5 10 15 20 25 30 Reported distance (cm) Number of measurements An example of outlying range measurements. This data was generated by rotating a beacon cricket at a fixed distance from a sensor. This histogram plots the range measurements taken by the sensor. Notice that the majority of the measurements are reasonably close to the true distance (much of the variance is caused by the movement of the ultrasound transmitter on the beacon with respect to the sensor); however, a few measurements are nearly half a meter too long. These outlying measurements can dramatically decrease localization and tracking performance, so it is desirable to detect and discard them. and therefore useless result with probability 1 -p. Physically, when a measurement occurs, there are three possible results:\n\n• The radio message is received, and the sensor's microphone is activated. However, before the acoustic pulse arrives at the sensor, an unexpected environmental sound reaches the sensor, causing a short measurement.\n\n• The radio message is received, and the sensor's microphone is activated. However, the acoustic pulse is deflected by an obstacle. Before the microphone deactivates due to a timeout, an echo of the acoustic pulse arrives, causing a long measurement.\n\n• The radio message is received, and the acoustic pulse arrives at the microphone without incident. The measurement is accurate. Equation (4.1) models this as a Bernoulli trial: the third case occurs with probability p, and one of the error cases occurs with probability 1 -p. h t ij is the random variable representing the outcome of this trial for measurement y t ij . Equation (4.1) leads directly to the probability distribution:\n\nwhere Z 1 and Z 2 are normalization constants. This changes the structure of equation (3.6), since each measurement y t ij now has an unknown explanatory variable h t ij . This new structure is straightforward to optimize using an Expectation Maximization (EM) algorithm [13]. Let θ = [x t ]. EM finds a maximizing θ repeatedly applying the following update step:\n\narg max θ E p(h t |y t ,θ k ) log p(y t , h t |θ, y old ) + log p(θ|y old ) = arg max θ h t p(h t |y t , θ k ) log p(y t , h t |θ, y old ) + log p(θ|y old ) = arg max θ log p(θ|y old ) + i,j h t ij p(h t ij |y t ij , θ k ) log p(y t ij , h t ij |θ) (4.3)\n\nIn the E-step, we must compute p(h t ij |y t ij , θ k ) for all i and j. Since log p(y t ij , h t ij = 0|θ) is constant with respect to θ, the corresponding terms have no effect on the maximization (4.3). Consequently, we need only calculate:\n\nThis expression is easy to compute since it is in terms of the measurement model conditioned on h and the Bernoulli distribution p(h):\n\nwhere\n\nIn the M-step, we optimize equation (4.3) to find a new estimate θ k+1 . Let w t,k ij = p(h t ij = 1|y t ij , θ k ) as computed in the E-step by equation (4.4). Equation (4.3) reduces to:\n\nThe M-step (4.5) is therefore a re-weighting of the original LaSLAT optimization problem (equation (3.6)). As a result, it can be performed analogously using Newton-Raphson (see Appendix B). Note that the weight w t ij of a measurement y t ij after the final EM iteration corresponds to the probability that the measurement is accurate given the current parameter estimates. Thus, accurate measurements are assigned weights close to one, and highly inaccurate measurements are assigned weights close to zero. This accomplishes the goal of rejecting outlying measurements.\n\nWhen the update step (4.3) is performed repeatedly, the θ k 's converge to x t * , an optimal estimate of sensor parameters and event locations that detects and ignores outlying measurements. This improves LaSLAT's performance in the presence of environmental ambient sounds or echoes due to physical obstacles.\n\nIn section 3.4, we assumed that the mobile moved arbitrarily. However, in some cases (for instance when tracking targets that move continuously and trigger events frequently), one may improve performance by explicitly requiring that successive events occur close to each other. In this section, we present a technique for adding such a constraint to LaSLAT.\n\nAs shown in section 3.4, the prior distribution for LaSLAT p(x t+1 |y t , y old ) is computed according to: p(x t+1 |y old , y t ) = p(e t+1 )q(s|y old , y t ).\n\n(\n\nUntil now, we have defined p(e t+1 ) to be a Gaussian with high covariance. Let e t+1 j = [e x j e v j e a j ], where e v j and e a j represent the velocity and acceleration of the mobile at the time of event j, and define e t+1 0 to be the estimated parameters of the event immediately preceding batch t + 1. Then we can express p(e t+1 ) as follows:\n\np(e t+1 ) = n j=1 p(e t+1 j |e t+1 j-1 ). (\n\nWe enforce smoothness by setting p(e t+1 j |e t+1 j-1 ) to a Gaussian with mean Ae t+1 j-1\n\nand covariance σ 2 d I. A is a matrix that expresses the expected physical motion of the mobile. We assume that events occur at a constant rate, and ignore quadratic terms, allowing us to use the matrix:\n\nas the dynamics matrix. This matrix has the advantage of being computationally straightforward while having the desired effect of smoothing the event positions. σ d is a tunable constant that allows us to vary the effect of the smoothness prior versus the effect of measurement data on the events' position estimates. Thus, we can rewrite equation (4.7) as:\n\nThis term can be rewritten in the form:\n\nwhere the block tridiagonal matrix B and vector µ d are constants expressible in terms of A and e t+1 0 :\n\nB and vector µ d can then incorporated into equation (3.9) as follows:\n\nAs we demonstrate in chapter 6, this smoothness constraint can noticeably improve performance on occasional poorly measured events.\n\nUnfortunately, the smoothness constraint complicates the marginalization step shown in equation (3.8), since the inverted matrix Ω -1 e t is no longer diagonal. Conse-quently, the smoothness prior is recommended for use only when LaSLAT computations are being performed centrally.\n\nChapter 5\n\nOur current implementation sends measurement batches to a central computer; however, we show here that LaSLAT can be feasibly distributed if desired. We also explore running time bounds for both a distributed implementation and a centralized implementation. Finally, we discuss the trade-off between centralized and distributed processing in LaSLAT.\n\nIn order to quantify LaSLAT's performance, several definitions are required. Let n local be the expected number of sensors within a one-hop neighborhood of a sensor s. The one-hop neighborhood can be thought of as a circle around s whose radius is two times the sensor's maximum sensing range. Thus, the one-hop neighborhood contains all sensors that can sense an event in common with s. We assume that s can communicate directly with all of the sensors in this one-hop neighborhood.\n\nFurthermore, we define n events to be the number of events observed by s in a single batch of measurements. n events can be held constant by varying the amount of time between batches.\n\nNote that n local and n events are constants fixed at deployment by the network designer. This means that asymptotic bounds in n local and n events are in some sense constant bounds, since they enable sensors to be provisioned with an amount of memory and processing power that is guaranteed sufficient no matter how many events the network observes.\n\nThe Gaussian prior p(x t |y old ) is completely summarized by a vector of means x t * and an inverse covariance Ω.\n\nThe symmetric inverse covariance matrix Ω = Ωs Ωse Ωes Ωe defines an undirected graph between sensors and events. Two vertices in this graph are connected if their corresponding block in Ω is non-zero. We say Ω has local connectivity if the corresponding graph only connects sensors that are within one hop of each other and connects events only to the sensors that measured the event. As we will show, in\n\nLaSLAT Ω always has local connectivity.\n\nThe mean vector is straightforward to distribute: each sensor simply stores its own mean, those of its one hop neighbors, and those of all nearby events. Thus, storage for means requires at most O(n local + n events ) per sensor.\n\nΩ requires more careful consideration, but is also distributable. If Ω has local connectivity, each row of Ω corresponding to a sensor has about n local +n events non-zero entries. Each row corresponding to an event has less than n local non-zero elements, since only sensors within the neighborhood of the event obtain measurements to it.\n\nLocally connected matrices are therefore easy to distribute. Each sensor stores its own rows in Ω. Event rows are delegated randomly to a sensor for storage, leaving sensor storing about n events /n local event rows. The amount of data stored by each sensor is consequently O(n local + n events ). If the computation is performed centrally, then the central computer must store this same amount of data per sensor in the network.\n\nrequired for each distributed Newton-Raphson iteration is O(n * n local ). Note that this is not a tight upper bound: as the sensor parameters begin to converge, many parameters will not need to be updated every batch. This increases the amount of parallelism that can be exploited, allowing the total running time to approach O(n local ), the amount of time required to simply locate the newest events. See [2] for more details and an in-depth description of Gauss-Seidel iterations.\n\nMarginalization is performed using equation (3.8):\n\nIt is distributable because each sensor row is updated only on behalf of local events.\n\nSince Ω se t and Ω e t s are sparse and Ω e t is block diagonal, the total time required is only O(n local * n events ) per sensor. All the computations can occur in parallel.\n\nUnfortunately, the smooth dynamics extension developed in section 4.2 produces\n\nan Ω e t that is block tridiagonal and has a dense matrix inverse in general. As a result, the smooth dynamics extension ruins local connectivity. Thus, smooth dynamics may only be employed when LaSLAT computations are performed at a central computer.\n\nIt remains to be shown that the LaSLAT computations retain local connectivity in Ω when the smooth dynamics extension is not employed. This is easily confirmed by induction on Ω s . The initial prior has Ω s = σ 0 I, which is diagonal and therefore locally connected. As we show in the appendix, the measurement incorporation and Gaussian approximation steps do not change the connectivity of Ω. The connectivity of Ω s only changes when events are marginalized out of the Gaussian prediction by equation (3.8). It can be verified, however, that the -Ω se Ω -1 e Ω es term added to Ω s only affects elements of Ω s whose corresponding sensors observed an event in common during the most recent batch. As a result, Ω s retains local connectivity during LaSLAT operations.\n\nEach LaSLAT batch requires at least one Newton-Raphson optimization, which consists of several iterations. However, these iterations need not continue until the solution is fully converged. In fact, if each LaSLAT batch performs only one Newton-Raphson iteration, then the resulting algorithm is almost precisely the Extended Kalman Filter (EKF) form of SLAT. As we show in chapter 6, additional Newton-Raphson iterations substantially improve performance. However, little performance is lost if the number of iterations is bounded at a small constant. In our experiments, Newton-Raphson often converged in less than ten iterations. In two dimensions, frequently as few as three or four were required for convergence. Thus, the number of iterations may be treated as a constant factor.\n\nWhen using measurement outlier rejection (section 4.1), even less Newton-Raphson iterations are required per optimization, since the EM optimization runs Newton-Raphson repeatedly. The EM optimization remains distributable, since the only additional processing step is the computation of measurement weights.\n\nAs we have demonstrated, LaSLAT is amenable to both centralized and distributed implementation. In a centralized implementation, the network must transport all range observations to a central computer, which performs LaSLAT computations and optionally returns position estimates to the network. In a distributed implementation, the LaSLAT computations are performed in-network.\n\nConsider a small network in a controlled environment such as a building. The experiments in chapter 6 are all representative of such a scenario. In this case, the central computer can be positioned within a single radio hop of all or nearly all sensors.\n\nIn this case, the best performance is obtained by transferring all the measurements to the central computer. Centralization in this case reduces the radio bandwidth, memory, and processing requirements on the sensors, decreasing the hardware cost of the network. Currently, sensors remain somewhat expensive and radio bandwidth remains a scarce commodity, so centralization is very desirable.\n\nAs the network grows larger distributed computation begins to look compelling.\n\nWhen multiple hops are required to transmit data to the central computer, the energy and bandwidth cost of centralization increases, particularly for nodes near the central computer. In this case, distributing LaSLAT may save power by keeping computation and communication local. Furthermore, in some scenarios (such as battlefield applications), it may be impossible to provision the network with a central computer, in which case distributed computation is necessary.\n\nIn many cases, however, centralized computation is straightforward and desirable even in large networks. For instance, in large indoor networks, it is possible to use preexisting high-speed wireless or wired networks to transmit data rapidly to a central computer, which need not be co-located with the network. In these environments, the network forms a hierarchy in which sensors transmit directly to a base station, which in turn transmits to the central computer over a high-speed link. This architecture has the advantage that the individual sensors need relatively few capabilities. The tracking sensor required for LaSLAT, for example, could be little more than a radio, an ultrasound receiver, and a tone detector. Such a limited sensor is likely to be cheaper and require less power than a sensor with enough processing power, memory, and radio bandwidth to perform distributed computations. The savings may be used to provision a smaller number of computation nodes or base stations with a high speed link or fast processor and a more substantial power supply. Furthermore, the hierarchical network is better suited to delivering tracking data from the network to end users, since end users are more likely to be connected to a high speed network than to the sensor network's radio system.\n\nLaSLAT has been designed to perform well with either a centralized or a distributed implementation. The results in this thesis were all computed using the centralized variant. The distributed variant performs exactly the same computations, and can therefore be expected to achieve the same results.\n\nOur experiments use the Cricket ranging system [1] (see figure 6-1). Sensor Crickets are placed in an area, and one Cricket is attached to a mobile. The mobile Cricket periodically emits an event (a radio and ultra-sound pulse) at a rate between one and three per second. At each sensor, the difference in arrival time of these two signals is proportional to the distance between the sensor and mobile. The crickets can therefore estimate ranges from these arrival times. No range measurements between the sensor Crickets are collected. The measurements are transmitted to a desktop machine, which processes them in batches using LaSLAT, which we implemented in Java. The ultra-sound sensor on a Cricket occupies a 1 cm by 2 cm area on the circuit 0 50 100 150 200 -200 -150 -100 -50 0 50 Figure 6-2: Small network setup. Six sensors (squares) are arranged around a rectangular enclosure. A camera captured the ground truth trajectory of the ROOMBA. The ROOMBA followed the trajectory depicted.\n\nboard, so it difficult to estimate the ground truth location of a Cricket beyond that accuracy.\n\nIn all of the experiments, LaSLAT recovered sensor locations in a relative coordinate system that can be aligned to a global coordinate system using a single rigid transformation (a rotation and translation). In order to compare LaSLAT's results to measured ground truth, we computed the necessary rigid transformation using the method described in [15].\n\nOur first experiment used the same setup as [22]. Six sensor crickets were placed around a rectangular enclosure 2.1 meters by 1.6 meters. A ROOMBA robotic vacuum cleaner with the mobile Cricket attached was allowed to move freely within the enclosure, generating about 250 events. See Figure 6-2.\n\nMost events were measured by all 6 sensors. An initial localization guess was obtained from radio connectivity information using the initialization routine of [29]. The resulting average localization error in this initial guess was 66 cm. This initial guess Circles are guesses of initial sensor locations obtained from radio connectivity (appendix A). LaSLAT processed measurements in batches of 30 events, and recovered sensor locations depicted by crosses. The trajectory is also correctly recovered. LaSLAT improves considerably on the initial localization guess obtained from connectivity. After a global rotation and translation, the average localization error for the sensors was 1.8 cm, which is within the error tolerance of the ground truth. was used as a prior and an initial iterate for LaSLAT. LaSLAT incorporated range measurements in batches of 30. Each mode finding operation required an average of only 2.8 Newton-Raphson steps. Figure 6-3 shows the estimated sensor localizations and trajectory. Since the output had an arbitrary rotation and translation, it was rigidly aligned to fit the rotation and origin of the ground truth using the algorithm described in [15]. The final localization error was 1.8 cm, averaged over the sensor nodes. This is within the error tolerance of the ground truth.\n\nIn the remainder of our two dimensional experiments, sensors were placed facing upwards on the floor of the coverage area. The mobile cricket was manually moved through the network. It was suspended at a constant height of about 190 centimeters, and oriented facing the floor. Due to the conical propagation of ultrasound from the mobile, this approximated a radial spread of sound in two dimensions. Range Figure 6-4: Sensor locations and mobile trajectory for a medium size network. Circles outline each of the 27 sensor nodes. Markers on the trajectory depict the location of events. 250 of the 1500 events are shown, with consecutive events connected by a line. The mobile was offset from the ground plane and could pass over nodes. To generate this figure, a homography that accounts for the camera transformation was used to project real-world coordinates to image coordinates. measurements gathered in these experiments were adjusted in a pre-processing phase to remove the effect of relative height.\n\nOur second experiment involved a larger network with 27 Cricket sensor nodes deployed in a 7 m by 7 m room. Whereas in the previous experiment the nodes were on the perimeter of the ROOMBA mobile's trajectory, in this experiment, we manually pushed a mobile through the network, generating about 1500 events. Figure 6-4 shows the location of the sensors and part of the trajectory of the mobile projected on a top view picture of the setup.\n\nEach event was heard by about 10 sensors. Figures 6-5  deviation contours for each sensor node. Nodes have high uncertainty at early stages, but when the mobile passes near a node, its error ellipse shrinks appropriately. In this experiment, a measurement bias of about 23 cm was computed for each sensor node. Figure 6-6 shows the final localization of the nodes, reprojected on the picture of the setup. This experiment used batches of 10 measurements and produced a final localization error of 1.9 cm. Since the ground truth is only accurate to a few centimeters, localization performance is best examined visually via Figure 6-6.\n\nWe compared LaSLAT using varying batch sizes to the Extended Kalman Filter (EKF), which is identical to LaSLAT limited to one Newton-Raphson iteration.  to incorporate each batch. The EKF's final localization error was 7.5 cm, which is outside the error tolerance for the ground truth. For comparison, the experiment setup is shown in figure 678. With about 0.3 sensors per square meter, this network is about half as dense as the one shown in Figure 6-4, which had about 0.5 sensors per square meter. As a result, on average only 5 sensors heard each event, and the localization error was about 7.5 cm. The algorithm also determined a measurement biases of about 20 cm for all nodes. For all batch sizes, the EKF produced an average localization error of about 80 cm, showing that the improvement due to Laplace's method can be very  significant.\n\nIt is possible to use LaSLAT to localize and track sensors and mobiles in a three dimensional environment. We performed two experiments designed to test LaSLAT in reasonable three dimensional deployments.\n\nFor these deployments, crickets were placed on the floor as in the two dimensional experiments. In addition, crickets were attached to walls using Velcro. A few sensors were also placed atop furniture in the area. We also modified the mobile cricket by attaching two additional ultrasound transducers. These transducers more closely simulate an omnidirectional acoustic pulse than the conic emanation of the standard cricket transducer. See figure 6-10 for a picture of this modified cricket.\n\nThe three dimensional environments present two obstacles that are not present in the two dimensional experiments. First, the furniture in the area drastically increases the effect of echoes on range measurement quality. These echoes are suppressed using the measurement outlier rejection scheme presented in section 4.1. Second, the initialization algorithm we used in two dimensions [29] does not provide for localization in 3D. However, we developed a simple extension (see appendix A) to allow us to initialize LaSLAT satisfactorily.\n\nIn our first three dimensional experiment, we placed 40 crickets on the floor and walls of a 4 x 6 meter room, which contained all of its normal furniture: tables, chairs, printers, and a refrigerator. This mobile was carried by hand through the room and moved completely arbitrarily, including changes in speed, loops, and twists. Each event was observed by on average 17 sensors. The network is shown in figure 67891011.\n\nLocalization results are plotted in figure 6-12. LaSLAT localized sensors to within 7 cm while successfully tracking the path of the mobile in 3D. Much of this error is accounted for by the difficulty of measuring ground truth in this environment.\n\nThe best 3D results were obtained using a relatively large batch size of 250 events. Smaller batch sizes lose too much information in the Gaussian approximation used to preserve state between batches, causing LaSLAT to converge slowly. In 3D, the optimization (3.6) has a more complicated structure due to the additional unknown parameters, which larger batches help clarify. Thus, a large initial batch helps LaSLAT make rapid progress towards an accurate estimate. After the first few batches, the batch size may be decreased to speed computation, since the later batches need only refine the already fairly high quality estimate.\n\nThe 3D environment shown in figure 6-11 is considerably less sanguine to ultrasound time-of-flight ranging than the two dimensional environments. Most events caused several very erroneous measurements. Figure 6-13 shows a partial screen capture from our Java-based LaSLAT implementation. The dark line indicates a portion of the trajectory recovered by LaSLAT. The light line is recovered using multilateration on the ground truth sensor positions and the raw measurement data, and therefore serves as a baseline tracking algorithm. LaSLAT's improved tracking performance is due to the combination of sensor calibration (section 3.2), measurement outlier rejection (section 4.1), and smooth dynamics (section 4.2). Some of these techniques can be and have been adapted to pure tracking applications. However, LaSLAT is able to perform the same high fidelity tracking while simultaneously localizing and calibrating the network.\n\nWe ran LaSLAT both with and without smooth dynamics and outlier rejection to 0 500 1000 1500 2000 2500 3000 0 50 100 150 Extended Kalman Filter (EKF) LaSLAT w/o smooth dynamics or outlier rejection LaSLAT w/o outlier rejection LaSLAT w/o smooth dynamics LaSLAT   Chapter 7\n\nIn addition to the features developed in this thesis, LaSLAT raises several interesting possibilities for future work.\n\nAs we demonstrated in chapter 6, LaSLAT performs very well in networks that have a reasonably convex shape. However, its performance diminishes when the network is divided into convex areas separated by narrow connections: for instance, two rooms separated by a narrow hallway. In these topologies, LaSLAT accurately localizes sensors in the rooms with respect to other sensors in the same room. However, it cannot always orient the rooms as a whole with respect to each other. It appears that the measurements gathered from events in and around the hallway area typically fail to unambiguously resolve the alignment. Augmenting LaSLAT using a coordinate system stitching approach similar to [7,21,22,24,31] could help resolve this ambiguity.\n\nIn our experiments, the mobile moved continuously for the majority of the experiment.\n\nHowever, real mobiles can be expected to remain stationary, potentially for lengthy periods of time. After LaSLAT has been running for some time, this poses no problem.\n\nHowever, during the first few batches of LaSLAT difficulties can arise. A stationary mobile causes a large number of highly similar events. This results in a batch of events that resolves few ambiguities in the sensor positions. This leads in turn to a multi-modal posterior whose complexity is lost in LaSLAT's Gaussian approximation.\n\nAs a result, LaSLAT's estimate may converge artificially to a very poor estimate. The corresponding prediction has low covariance since it is the product of many events, but is nevertheless quite inaccurate.\n\nThere are a number of techniques available to resolve this problem. First, it may be possible to use a heuristic over the collected measurements or the LaSLAT results\n\nto detect uninformative batches of events. Bad batches can then be ignored. In effect,\n\nLaSLAT would wait to begin localization until good quality data becomes available.\n\nAlternatively, we could use a multi-modal posterior approximation instead of the Gaussian approach detailed in this thesis.\n\nThe Gaussian approximation described in section 3.3 has an important disadvantage:\n\nit cannot accurately represent a multi-modal posterior distribution. Consequently, LaSLAT requires that the initial measurement batches identify a single high probability mode. This necessity can be diminished by using a different approximation such as a mixture of Gaussians or a particle filter. These approximations can model multi-modal distributions; however, they increase the processing load for a LaSLAT batch.\n\nWe were not able to experiment with these types of representation for this thesis.\n\nHowever, they may be necessary for accurate localization of some networks, especially when areas have few measurements or the mobile is somewhat stationary. They may also permit reduced batch sizes when performing three dimensional SLAT.\n\nable to move autonomously, sensors could automatically migrate to achieve the desired quality of sensor coverage.\n\nThis thesis has been written under the assumption that sensors compute ranges using Time Difference of Arrival (TDoA) ranging; thus, the mobile emits a tagged radio pulse followed by an acoustic pulse. Sensors use the difference in time of arrival between the radio message and the acoustic pulse to estimate distance.\n\nHowever, the measurement model (section 3.2) can be adapted to use an acoustic pulse alone. In this case, the sensors must be time synchronized, which can be done using an off-the-shelf time synchronization system such as [18]. The sensors measure the arrival times of acoustic pulses, which they report to LaSLAT. These arrival times can be seen as a function of the true distance between the event and the sensor and the true time of the event. The event time becomes an additional parameter to be estimated by the Bayesian filter. Such a measurement model would allow SLAT to localize and track using only acoustic time of arrival. More generally, it may be possible to localize using ambient environmental noise, as long as recognizable noises are witnessed by enough sensors.\n\nThe results provided in chapter 6 were generated using a centralized implementation.\n\nMeasurements were taken in a real network, then exfiltrated to a laptop for processing.\n\nHowever, as we show in chapter 5, LaSLAT can be feasibly distributed to perform the necessary computations in-network. As we argue in that section, it is not always desirable to distribute LaSLAT processing; however, a distributed implementation will allow LaSLAT to be of assistance in networks where centralized computation is infeasible.\n\nIn this thesis we presented LaSLAT, a sensor network algorithm that simultaneously localizes sensors, calibrates sensing hardware, and tracks unconstrained moving targets using only range measurements between the sensors and the mobile. On both two-and three-dimensional networks using the Cricket ranging system, LaSLAT was able to localize sensors to within several centimeters of their ground truth positions while recovering a range measurement bias for each sensor and the complete trajectory of the target.\n\nLaSLAT is based on a Bayesian filter, which updates a probability distribution over the quantities of interest as measurements arrive. The algorithm is distributable, and requires only a constant amount of space with respect to the number of measurements incorporated. LaSLAT is easy to adapt to new types of hardware and new physical environments due to its use of intuitive probability distributions: one adaptation demonstrated in this thesis uses a mixture measurement model to detect and compensate for bad acoustic range measurements due to echoes.\n\nLocalization and calibration using an unconstrained mobile offers several advantages over localization and calibration using inter-sensor ranges. Since the mobile may move freely, the measurements taken by the sensors have greater diversity and therefore diminished likelihood of systematic errors. In particular, the mobile can help overcome interference from fixed obstacles such as furniture.\n\nUse of a mobile also means that the sensors are no longer constrained to have line of sight to each other. This enables a broader range of network deployments: in particular, it allows sensors to be placed to optimize tracking coverage rather than to accommodate the peculiarities of a localization algorithm.\n\nLaSLAT in its current form could be used to facilitate deployment of indoor navigation systems, either for human use or as a guidance system for mobile robots.\n\nUsing LaSLAT, the sensors for such a system could be deployed in an ad-hoc fashion on walls, floors, or ceilings. They could then use the movements of persons to be tracked (i.e. targets) to localize and calibrate in-place, forming a high-precision location service with little human effort.\n\nLaSLAT also suggests an interesting automated sensor deployment system using a mobile robot. Such a robot would survey its environment, periodically dropping sensors. The sensors would provide high quality landmarks for the robot's mapping system, while the robot provided a moving target for LaSLAT-based localization of the sensors. The sensors could even provide a long term record of the mapping operation, which they could propagate to other robots not tasked with surveying.\n\nWhile many impediments remain, LaSLAT is an important step toward cheap, easily deployable, and accurate sensor networks for target tracking.\n\nLet h i,j be the minimum number of radio hops required to forward a message from sensor i to sensor j. Perform the following steps:\n\n1. Choose node n 0 to be the sensor with minimal ID. Propagate a gradient from n 0 to compute h 0,k for all k.\n\n2. Choose node n 1 to be the sensor k with maximal h 0,k , breaking ties by ID. n 1 is one \"corner\" of the network. Propagate a gradient from n 1 .\n\n3. Choose node n 2 to be the sensor k with maximal h\n\n1,k , breaking ties by ID. n 2 is the corner opposite n 1 . Propagate a gradient from n 2 . 4. Choose node n 3 to be the sensor k that minimizes |h 2,k -h 1,k |, breaking ties by the sum h 2,k + h 1,k (any further ties are resolved by ID). n 3 is the corner between n 1 and n 2 . Propagate a gradient from n 3 . 5. Choose node n 4 to be the sensor k that minimizes |h 2,k -h 1,k |, breaking ties by maximizing h 3,k (any further ties are resolved by ID). n 4 is the final corner. Propagate a gradient from n 4 . 6. Choose node n 5 to be the sensor k that minimizes |h 2,k -h 1,k | + |h 4,k -h 3,k |, breaking ties by ID. This sensor is closest to the center of the network. Propagate a gradient from n 5 . This initialization algorithm tends to be highly inaccurate (see figure A-1). However, the chosen positions tend to help the LaSLAT optimization avoid local minima that decrease accuracy. Our specific choice of initialization is somewhat irrelevantany reasonably accurate localization algorithm could be substituted. Equation (B.2) is a linear least squares problem in terms of x. Its solution can be found by setting the derivative with respect to x to zero. This leaves a linear problem that can be solved by matrix inversion: Ω x + 1 σ 2 ∇f (t) ∇f (t) x = Ω x µ + 1 σ 2 ∇f (t) b. (B.3)\n\nFurthermore, differentiating (B.2) one more time results in H = Ω x + 1 σ 2 ∇f (t) ∇f (t) , which is required for Laplace's method (section 3.3). Since (B.2) is an approximation to the negative log posterior (3.6), H serves as an approximation to its Hessian at x (t) .\n\nBecause the true distance f ij depends only on sensor i and event location j, each row of ∇f (t) is made up of zeros, except at locations corresponding to the ith sensor and the jth event. Thus ∇f (t) ∇f (t) has local connectivity. If Ω x = Cov -1 x t |y old has local connectivity, then the updated covariance matrix Cov -1 x t |y old = Ω x + ∇f (t) ∇f (t) /σ 2 also has local connectivity. Therefore as claimed in chapter 5, incorporating a batch of measurements preserves local connectivity."
}