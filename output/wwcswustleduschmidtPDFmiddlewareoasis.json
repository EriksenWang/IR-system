{
    "title": "Experiences with Service-Oriented Middleware for Dynamic Instrumentation of Enterprise Distributed Real-time and Embedded Systems",
    "publication_date": "2004-06",
    "authors": [
        {
            "full_name": "James H Hill",
            "firstname": "James H",
            "lastname": "Hill",
            "affiliations": [
                {
                    "organization": "Indiana U./Purdue U. at Indianapolis",
                    "address": {
                        "city": "Indianapolis",
                        "postcode": "46202"
                    }
                }
            ]
        },
        {
            "full_name": "Hunt Sutherland",
            "firstname": "Hunt",
            "lastname": "Sutherland",
            "affiliations": [
                {
                    "organization": "GE Global Research",
                    "address": {
                        "city": "Niskayuna",
                        "postcode": "12309"
                    }
                }
            ]
        },
        {
            "full_name": "Douglas C Schmidt",
            "firstname": "Douglas C",
            "lastname": "Schmidt",
            "affiliations": [
                {
                    "organization": "Vanderbilt University, VU Station B #351679",
                    "address": {
                        "city": "Vanderbilt Place Nashville",
                        "postcode": "2301 37235"
                    }
                }
            ]
        },
        {
            "full_name": "Thomas Silveria",
            "firstname": "Thomas",
            "lastname": "Silveria",
            "affiliations": [
                {
                    "organization": "Raytheon Company",
                    "address": {
                        "city": "Portsmouth",
                        "postcode": "02871"
                    }
                }
            ]
        },
        {
            "full_name": "John M Slaby",
            "firstname": "John M",
            "lastname": "Slaby",
            "affiliations": [
                {
                    "organization": "Raytheon Company",
                    "address": {
                        "city": "Portsmouth",
                        "postcode": "02871"
                    }
                }
            ]
        },
        {
            "full_name": "Paul Staudinger",
            "firstname": "Paul",
            "lastname": "Staudinger",
            "affiliations": [
                {
                    "organization": "GE Global Research",
                    "address": {
                        "city": "Niskayuna",
                        "postcode": "12309"
                    }
                }
            ]
        },
        {
            "full_name": "Nikita A Visnevski",
            "firstname": "Nikita A",
            "lastname": "Visnevski",
            "affiliations": [
                {
                    "organization": "GE Global Research",
                    "address": {
                        "city": "Niskayuna",
                        "postcode": "12309"
                    }
                }
            ]
        }
    ],
    "abstract": "Test and evaluation (T&E) of enterprise distributed real-time and embedded (DRE) system quality-of-service (QoS) during early phases of the software lifecycle helps increase confidence levels that the system under development will meet its QoS requirements. Conventional T&E techniques are complex since they tightly couple system implementations with metrics of interest. To help alleviate this complexity, the Embedded Instrumentation Systems Architecture (EISA) initiative defines an architecture that provides a metadata-driven methodology for heterogeneous data collection and aggregation in a synchronized and time-correlated fashion. This paper describes our experiences applying an EISA-based T&E middleware framework to the Unified SHIP platform, which is a representative system for next-generation shipboard computing systems. The middleware framework discussed in this paper enables instrumenting shipboard computing systems to collect and extract metrics without a priori knowledge of the metrics collected. We found that the flexibility of EISA's metadata-driven approach to instrumentation and data collection increased developer and tester knowledge and analytical capabilities of end-to-end QoS in shipboard computing systems.",
    "full_text": "Challenges of developing shipboard computing systems. Shipboard computing systems are a class of enterprise distributed real-time and embedded (DRE) systems with stringent quality-of-service (QoS) requirements (such as latency, response time, and scalability) that must be meet in addition to their functional requirements [9]. To ensure QoS requirements of such systems, system developers must analyze and optimize end-to-end performance throughout the software lifecycle. Ideally, this test and evaluation (T&E) [2] process should start in the architectural design phase of shipboard computing, as opposed to waiting until final system integration later in the lifecycle. T&E of shipboard computing system QoS requirements typically employs software instrumentation techniques [1,5,7,9] that collect metrics of interest (e.g., CPU utilization, memory usage, response of received events, and heartbeat of an application) while the system executes in its target environment. Performance analysis tools then evaluate the collected metrics and inform system developers and testers whether the system meets its QoS requirements. These tools can also identify bottlenecks in system and application components that exhibit high and/or unpredictable resource usage [3,6].\n\nAlthough software instrumentation facilitates T&E of shipboard computing system QoS requirements, conventional techniques for collecting metrics are tightly coupled to the system's implementation [2,9,11]. For example, shipboard computing developers often decide during the system design phase what metrics to collect for T&E, as shown in Figure 1. Developers then incorporate into the system's design the necessary probes to collect these metrics from the distributed environment.\n\nThe drawback with a tightly-coupled approach is that shipboard computing developers must either (1) redesign the system to incorporate the new/different metrics or (2) use ad hoc techniques, such as augmenting existing code with the necessary interfaces without understanding its impact to the overall system's design and maintainability, to collect such metrics. Developers therefore need better techniques to simplify instrumenting shipboard computing systems for collecting and extracting metrics-especially when the desired metrics are not known a priori.\n\nOur approach â†’ EISA-based T&E framework. The Embedded Instrumentation Systems Architecture (EISA) [10] initiative defines a metadata-driven method for heterogeneous data collection and aggregation in a synchronized and time-correlated fashion [10]. EISA uses a data-centric approach to instrumentation and data collection for T&E, as opposed to an interface-centric approach. Instead of integrating into the system's design many interfaces and methods to extract and collect metrics, EISA treats all metrics as a arbitrary data that flows over a common reusable channel and discoverable via metametricsfoot_0  [8], as shown in Figure 2. EISA thus helps reduce the coupling between system design and instrumentation logic incurred with the conventional T&E techniques described above. This experience report discusses our insights and lessons learned while developing and applying the Open-source Architecture for Software Instrumentation of Systems (OASIS) in the context of shipboard computing systems. OASIS is a service-oriented middleware framework that enables lightweight dynamic instrumentation of EISAbased T&E from the domain of shipboard computing. OASIS provides techniques and tools that enable shipboard computing developers and testers to (1) collect metrics from a distributed environment at runtime without a priori knowledge of what metrics are being collected, (2) apply performance analysis tools to evaluate QoS without being tightly coupled to the system's implementation, and (3) use the results of the metric analysis to evaluate end-to-end QoS of application and infrastructure components throughout their lifecycle.\n\nOur experiences gained from developing and applying OASIS to shipboard computing systems show that EISA's metadata-driven approach to instrumentation and data collection provides flexibility that can increase DRE system developers and tester's knowledge base and analytical capabilities of end-to-end QoS. We also found that OA-SIS helped quantify which technologies were most beneficial for collecting metametrics.\n\nPaper organization. The remainder of this paper is organized as follows: Section 2 summarizes the challenges that motivate the need for OASIS in the context of shipboard computing; Section 3 describes how OASIS addresses these challenges; and Section 4 presents concluding remarks and lessons learned.\n\nIn previous work [10], EISA-based tools were used to instrument hardware components (e.g., sensor hardware components) of enterprise DRE systems. These systems, however, are composed of both hardware and software components. Ideally, end-to-end QoS evaluation of shipboard computing systems should employ performance analysis of both hardware and software components.\n\nTo help evaluate EISA in a representative enterprise DRE system, we created the Unified Software/Hardware Instrumentation Proof-of-concept (Unified SHIP) platform, which provides a representative environment for investigating technical challenges of next-generation domain of shipboard computing systems. As shown in Figure 3, the Unified SHIP platform contains software components (i.e., the rectangles in Figure 3) implemented using the Component Integrated ACE ORB (www.dre.vanderbilt. edu/CIAO), which is a C++ implementation of the Lightweight CORBA Component Model [4]. Conversely, performance analysis tools are implemented using a variety of programming languages, such as C++, C#, and Java. The software applications run on real-time Linux and Solaris operating systems, whereas performance analysis tools run on Windows and conventional Linux operating systems. Figure 3 also shows how the Unified SHIP platform consists of EISA-compliant sensor hardware components and a collection of software components that performed the following operational capabilities for shipboard computing systems: 4 components are trackers that monitor events in the operational environment, 3 components are planners that process data from the sensor components, 1 component performs configuration of the effectors, 3 components are effectors that react to commands from the configuration component, 3 components allow operators to send commands to the planner components, and 1 component is a gateway that authenticates login credentials from the operator components. The directed line between each component in Figure 3 represents inter-component communication, such as sending an event between two different components.\n\nExisting techniques for instrumenting shipboard computing systems assume software instrumentation concerns (e.g., what metrics to collect and how to extract metrics from the system) are incorporated into the system's design. Since the Unified SHIP platform consists of hardware and software components at various degrees of maturity and deployment, it is hard to use existing instrumentation techniques to collect and extract metrics for QoS evaluation during early phases of the software lifecycle. In particular, developers and testers of the Unified SHIP platform face the following challenges:\n\nâ€¢ Challenge 1: Describing metametrics in a platform-and language-independent manner. The heterogeity of the unified SHIP platform's software and hardware components makes it undesirable to tightly couple performance analysis tools to the target platform and language of software and hardware components to collect and analyze metrics. Platform-and language-independent techniques and tools are therefore needed that will enable description of metrics collected from hardware and software components.\n\nâ€¢ Challenge 2: Collecting metrics without a priori knowledge of its structure and quantity. Metrics collected via instrumentation in the Unified SHIP platform come from heterogenous sources, which make it tedious and error-prone for system developers and testers to tightly couple the systems implementation to understand each metric and technology a priori. Techniques are therefore needed that will enable the collection of metrics from the Unified SHIP platform for QoS evaluation without a priori knowledge of which metrics are collected.\n\nThe remainder of this experience report discusses the OASIS techniques and tools we used to address these challenges in the context of the Unified SHIP platform.\n\nThis section discusses the structure and functionality of the Open-source Architecture for Software Instrumentation of Systems (OASIS), which is service-oriented middleware that enables lightweight dynamic instrumentation of enterprise DRE systems. We also describe how OASIS was applied to address the Unified SHIP platform challenges identified in Section 2.\n\nThe Unified SHIP platform discussed in Section 2 introduced several challenges that system developers and testers encounter when instrumenting shipboard computing systems to collect and extract metrics for performance analysis tools. These challenges involve describing, collecting, extracting, and analyzing metrics without a priori knowledge of the structure and quantity of metrics with respect to the underlying middleware and system infrastructure.\n\nTo address these challenges, we have developed OASIS to collect and extract metrics of interest without a priori of their structure or quantity. Metric collection and extraction in OASIS is independent of specific technologies and programming languages, which decouples OASIS from shipboard computing software details, such as incorporating into the system's design the necessary probes to collect and extract metrics for performance analysis. System developers and testers are thus not constrained to make decisions regarding what metrics to collect for performance analysis tools during earlier phases of the lifecycle.\n\nFigure 4 presents an high-level overview of OASIS. As shown in this figure, OASIS consists of the following five entities:\n\nâ€¢ Software probes, which are autonomous agents responsible for collecting metrics of interest in the system, including the current value(s) of an event, the current state of a component, or the heartbeat the component or the node hosting the component. Software probes are considered autonomous agents since they act independently of OASIS. For example, an event monitor software probe from the Unified SHIP platform may send metrics every time a component receives an events; where as, a heartbeat software probe may send metrics at a periodic rate. Finally, each software probe is distinguished by an user-defined UUID and corresponding human-readable name.\n\nThere are two types of software probes in OASIS: application-level probes and infrastructure-level probes. Application-level probes are embedded into application components to collect metrics of interest, such as the state of a component or number of events sent/received. Infrastructure-level probes collect metrics that are not easily available at the application-level or may collect redundant metrics at the application-level, such as current memory usage or heartbeat of each host in the target environment. Both application-and infrastructure-level probes submit their metrics to the embedded instrumentation node described next.\n\nâ€¢ Embedded instrumentation node (EINode), which is responsible for receiving metrics from software probes. OASIS has one EINode per application-context, which is a domain of commonly related data. Examples of an application-context include a single component, an executable, or a single host in the target environment. The applicationcontext for an EINode, however, is locality constrained to ensure data transmission from a software probe to an EINode need not cross network boundaries, only process boundaries. Moreover, the EINode controls the flow of data it receives from software probes and submits to the data and acquisition controller described next. Each EINode is also distinguished by a unique user-defined UUID and corresponding human-readable name.\n\nâ€¢ Data acquisition and controller (DAC), which receives data from an EINode and archives it for acquisition by performance analysis tools, such as querying the performance of the latest state of component collected by a application-level software probe. The DAC is a persistent database with a consistent location in the target environment that can be located via a naming service. This design decouples an EINode from a DAC and enables an EINode to dynamically discover at creation time which DAC it will submit data. Moreover, if a DAC fails during at runtime the EINode can (re)discover a new DAC to submit data. The DAC registers itself when the test and evaluation manager (see below) when it is created and is identifiable by a unique user-defined UUID and corresponding human-readable name.\n\nâ€¢ Test and evaluation manager (T&E), which is the main entry point for user applications (see below) into OASIS. The T&E manager gathers data from each DAC that has registered with it. The T&E manager also enables user applications to send signals to each software probe in the system at runtime to alter its behavior, e.g., by decreasing/increasing the hertz of the heartbeat software probe in the Unified SHIP platform scenario. This dynamic behavior is possible because the T&E manager is aware of all its DACs in the system, the DACs are aware of all its EINodes, and the EINodes are aware of all their registered software probes.\n\nâ€¢ Performance analysis tools, which are domain-specific tools, such as distributed resource managers and real-time monitoring and display consoles from the Unified SHIP platform, that interact with OASIS by requesting metrics collected from different software probes via the T&E manager. Tools can also send signals/commands to software probes to alter their behavior at runtime. This design enables system developers and testers and performance analysis tools to control the effects of software instrumentation at runtime and minimize the affects on overall system performance.\n\nFigure 5 shows the integration of OASIS with the Unified SHIP platform. Each hardware and software component is associated with an EINode that contains a set of software probes (or instruments in the case of hardware components [8]) that collect and submit metrics for extraction from the system. When an EINode receives metrics from a software probe (or instrument), it sends it to a DAC for storage and on-demand retrieval. Performance analysis tools then request collected metrics via the T&E manager, which locates the appropriate metrics in a DAC.\n\nThe remainder of this section describes how we applied OASIS to address the two challenges presented in Section 2.\n\nSolution 1. Using XML-based Techniques to Capture Metametrics. Challenge 1 in Section 2 pertained to system developers and testers of the Unified SHIP platform needing a technique for capturing platform-and language-independent metametrics. OASIS addresses this challenge by using XSL Schema Definition (XSD) to describe the metametrics in the Unified SHIP platform. XSD provides fine-grained description capabilities of data types (such as quantity and constraints) as opposed to other techniques (such as Interface Definition Language (IDL)) that only capture data types and structure). M e t a d a t a ' t y p e = ' component . s t a t e ' /> 8 <x s d : c o m p l e x T y p e name= ' component . s t a t e '> 9 <x s d : a n n o t a t i o n i d = ' m e t a d a t a '> 10 <x s d : a p p i n f o>0A499B6B-7250-4B88-B9DC-360D32639081</ x s d : a p p i n f o> 11 <x s d : d o c u m e n t a t i o n>M o n i t o r s a component ' s s t a t e </ x s d : d o c u m e n t a t i o n > 12 </ x s d : a n n o t a t i o n > 13 <x s d : s e q u e n c e > 14 <x s d : e l e m e n t name= ' component ' t y p e = ' x s d : s t r i n g ' /> 15 <x s d : e l e m e n t name= ' s t a t e ' t y p e = ' x s d : i n t e g e r ' /> 16 </ x s d : s e q u e n c e > 17 </ x s d : c o m p l e x T y p e> 18 </ x s d : s c h e m a> Listing 1.1. Example XSD File for Describing Metrics Collected by a software Probe\n\nListing 1.1 shows an example XSD file that describes metrics collected by a software probe for tracking a software component's state from the Unified SHIP platform. This listing shows the software probe has an UUID that identifies its metametrics. Each element in the XSD file represents a data point collected in the metrics, such as the name of the component as listed in Listing 1.1. This information is sent to the DAC at registration time (i.e., before the Unified SHIP system is active). Performance analysis tools, such as distributed resource managers and real-time monitoring and consoles, then use the XSD file to learn about metrics of interest collected without requiring a priori knowledge how the metric was collected. Solution 2. Using Binary Data and Sockets to Transmit Metrics. Challenge 2 in Section 2 pertained to collecting metrics of interest from a system without a priori knowledge of its structure and quantity. OASIS addresses this challenge by using binary data to represent metrics collected by a software probe and transmitting the metrics using traditional socket programming. It uses binary data and socket programming so it is not bound to a specific technology or programming language. Moreover, transmitting binary data over sockets significantly enhances performance (e.g., response-time and latency) compared with using text-based formats, such as XML. Finally, prior work [10] has shown the easy of using socket programming to adapt hardware components to the EISA specification.\n\nFigure 6 shows how metrics are collected from the Unified SHIP platform using OASIS. This figure shows how software probes package metrics from the Unified SHIP Fig. 6. Collecting Metrics as Binary Data in OASIS platform into blobs of binary data. Before a software probe sends the metrics to an EINode, it prepends a metric header to identify the origins of the metric. After the EINode receives a packaged metrics, it prepends a location header that identifies what EINode is transmitting data and then sends the final package to the Data Acquisition and Controller for storage. Performance analysis tools (such as distributed resource managers and real-time monitors) then request collected metrics using the T&E manager and use metametrics (see Section 3.2) to analyze metric contents.\n\nTest and evaluation (T&E) of shipboard computing system QoS during early phases of the software lifecycle helps increase confidence that the system being developed will meet it requirements. Conventional T&E instrumentation mechanisms, however, are tightly coupled with the system's design and implementation. This experience report describes how the OASIS implementation of the Embedded Instrumentation Systems Architecture (EISA) initiative helped reduce these coupling concerns by applying a metadata-driven (as opposed to interface-driven) approach to T&E instrumentation continuously throughout the software lifecycle. OASIS enabled the DRE system to evolve throughout the software lifecycle without negatively impacting T&E instrumentation needs.\n\nThe following are lessons learned based on our experience thus far designing and implementing OASIS in the context of the Unified SHIP scenario described in Section 2:\n\nâ€¢ Using a metadata-driven approach to shipboard computing system instrumentation provides a more flexible solution than using an interface-driven approach. The flexibility of OASIS's EISA-based metadata-driven approach to instrumentation and data collection helped increase developer and tester knowledge and analytical capabilities of end-to-end QoS. In particular, OASIS's metadata-driven instrumentation of the Unified SHIP platform enabled our team to collect metrics from heterogeneous environments and technologies and develop analytical tools that were decoupled from metric sources or technologies.\n\nâ€¢ XML is best used for describing metrics, not transmitting them. We learned by applying OASIS to the Unified SHIP platform that XML is better used for describing metrics and metric metadata than transmitting metrics at runtime to the OASIS Data Acquisition and Controller. In particular, the stringent QoS requirements of shipboard computing systems conflicted with the overhead incurred from transmitted XML-based metrics. Instead, we found it was more efficient to transmit metametrics using XMLbased documents (such as XML Schema Definition) and use binary streams to transmit the actual metrics.\n\nâ€¢ Although metadata is not transmitted at runtime, it must still be transmitted efficiently instead of haphazardly. During registration time, an OASIS EINode transmits XML-based metadata that describes the metrics collected by its software probes. In some cases, an EINode may have different configurations of the same software probe, such as one event monitor probe that collects data on every event and another probe that collects data on every other event. For this case, the same metric metadata will be transmitted twice. Our future work is investigating techniques for optimizing transmission of metadata to reduce redundancy and unnecessary transmission.\n\nOASIS has been integrated in the CUTS system execution modeling tool and is freely available for download in open-source from the following location: www.dre. vanderbilt.edu/CUTS.\n\nMetametrics are metadata that describe metrics collected at runtime without knowing its structure and quantity a priori."
}