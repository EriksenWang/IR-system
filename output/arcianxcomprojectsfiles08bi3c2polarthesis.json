{
    "title": "N/A",
    "publication_date": "2008-12",
    "authors": [
        {
            "full_name": "Ashish Myles",
            "firstname": "Ashish",
            "lastname": "Myles",
            "affiliations": []
        }
    ],
    "abstract": "Chair: Jörg Peters Major: Computer Engineering Subdivision surfaces are popular in animation as a way of smoothing coarse control meshes. On the other hand, the Computer-Aided Design (CAD) industry typically prefers the simplicity and predictability of NURBS when constructing high-quality surfaces for the manufacture of cars and planes. Since a single NURBS patch is capable only of modeling the topologies of planes, cylinders, and torii, it is complex to use a NURBS atlas to construct a surface of arbitrary topology that is curvature-continuous everywhere.\nWhile popular subdivision algorithms of low parametric degree, like Catmull-Clark and Loop subdivision, are not inherently restricted in topology, they suffer from shape artifacts at so-called \"extraordinary vertices\". This makes them unattractive for CAD.\nSubdivision theory requires a (bi)degree of at least 6 in order for stationary subdivision to be non-trivially curvature-continuous and mitigate some of these shape artifacts.\nWe circumvent this restriction by designing a curvature-continuous non-stationary bicubic subdivision algorithm which has the implementational simplicity of stationary algorithms. We hope techniques such as ours make subdivision surfaces more attractive for high-quality constructions in CAD.",
    "full_text": "To the betterment of education everywhere\n\nTABLE OF CONTENTS . . . . . . . . . . . .\n\nTable page 1-1 Various mesh refinement algorithms . . . . . . . . . . . . . . . . . . . . . . . . . 13 3-1 Spectral behavior of RTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 LIST OF SYMBOLS n h , S η equivalent to n-1 h=0 for positive integers n and η∈S for sets S, respectively A block-circulant subdivision matrix Â block-diagonalization of subdivision matrix A computed via Fourier transform Âk k th Fourier block of Â α k index of the Fourier block Âα k which contributes the eigenvalue ℓ k c τ , c j:n cos (2πτ ), cos 2π j n e k eigenspline êk Fourier radial eigenspline F Fourier block matrix with 6 × 6 blocks.\n\noperator that, when applied to a polar configuration q, returns the set of all its circular Greville abscissae Gq = j n j∈ n G m operator that converts a polar configuration q m to the uniform periodic cubic spline ring G m q m : [2λ m , 4λ m ] × Ê 1 → Ê (see Figure 3-2, pp. 28)\n\nG m q m (r, τ ) := ℓ k eigenvalue of A with the k th largest modulus, counting multiplicity Λ diagonal matrix of the eigenvalues of A (respectively, Â)\n\nL operator that converts a polar configuration to its limit surface in polar parameterization: L(q) := x n m valence of the polar vertex of the polar configuration q m * N (m) i (r) the i th uniform cubic B-spline basis with knots 1 2 m [-1, 0, 1, 2, 3, 4, 5, 6] • N\n\n(n) j (τ ) the j th uniform periodic cubic B-spline basis with knots\n\neigencoefficient corresponding to eigenspline e k q m an m-times refined polar configuration Ê, Ê 1 the set of reals and the set of reals modulo 1, respectively s τ , s j:n sin (2πτ ), sin 2π j n V R (resp. V C ) matrix whose columns are the real (respectively, complex) right eigenvectors of A V matrix whose columns are the right eigenvectors of Â v k , vk right eigenvector of A and A α k , respectively, corresponding to ℓ k w k , ŵk left eigenvectors of A and A α k , respectively, corresponding to ℓ k\n\nx polar limit surface in polar parameterization\n\nx polar limit surface in Cartesian parametrization\n\n, n the set of integers and the set of integers modulo n, respectively Z n the strictly increasing sequence of integers in n\n\nFrom automobile and plane design to digital movie animation to video and computer game character design, smooth curves and surfaces play a fundamental role in the design of objects. Standard Computer-Aided Design (CAD) packages need to represent these surfaces in an efficient form that is easy to manipulate algorithmically, and intuitive for the user to mold into the desired shape. Additionally, such surface representations should be easy to visualize and render onto the screen.\n\nSmooth surface representations in CAD packages can be largely classified into two categories: implicit and parametric. Implicit surfaces are defined in terms of zero-sets. For example, x 2 + y 2 + z 2 -1 = 0 is the implicit representation of the unit sphere. While this representation is useful to create basic shape and to apply boolean operations, visualizing and rendering the surface typically requires solving a set of non-linear equations.\n\nThe alternative is to use parametric representations. In contrast to its implicit form, a unit sphere can be represented using three equations in terms of two parameters s and t as follows.\n\nx(s, t) = cos(s) cos(t), y(s, t) = cos(s) sin(t), z(s, t) = sin(s)\n\nAs s is varied from 0 to π and t is varied from 0 to 2π, the points on the surface of the sphere are generated. A standard form of parametric representation is called Non-Uniform Rational B-Splines, or NURBS for short. In this case, the x-, y-, and z-coordinates are represented separately by piecewise rationals. The surface is defined by A) a control mesh, or control net, which for NURBS is a quad mesh with each internal vertex having valence 4, as shown in Figure 1-1; B) two knot sequences that determine the extent and effect of the domain, one for each of the s and t parameters; and, C) weights associated with each vertex in the control mesh. Even though boolean operations on NURBS are not straightforward, NURBS are popular due to their intuitive manipulability and ease of rendering. However, being based on quad-grid control structures, NURBS are capable of representing only topological planes, cylinders, or torii. While the theory of NURBS will not be discussed, a special case of it is important in this study: the uniform B-spline, with uniformly spaced knots and all weights 1. Surfaces in B-spline form can be converted directly to closed form, which is useful for analysis. Alternatively, the surface can be defined via an iterative mesh refinement algorithm, which is easier to generalize. Chapter 2 discusses uniform bi-degree-3 splines in greater detail.\n\nTable 1-1. Various mesh refinement algorithms (not comprehensive). Quad/triangle is only C 1 over certain edges and isolated points. Except for TURBS, all produced surfaces are generically only C 1 at isolated points. The last column indicates whether or not the algorithm interpolates its control points.\n\nYear Algorithm Smooth Degree Basis Interp. 1978 Catmull-Clark [Catmull and Clark, 1978] C 2 bi-3 2 no 1978 Doo-Sabin [Doo and Sabin, 1978] C 2 bi-2 2 no 1987 Loop [Loop, 1987] C 2 4 △ no 1990 Butterfly [Dyn et al., 1990] C 1 N/A △ yes 1996 Kobbelt [Kobbelt, 1996] C 1 N/A 2 yes 1997 Simplest [Peters and Reif, 1997] C 1 2 2 no 1998 TURBS [Reif, 1998] [Velho and Zorin, 2001] C 4 6 2 no 2001 Circle preserving [Morin et al., 2001] C 2 3 & trig. 2 no 2002 Ternary triangle [Loop, 2002b] C 4 4 △ no 2003 Quad/triangle [Stam and Loop, 2003] C 2 bi-3, 4 △, 2 no 2004 4-3 [Peters and Shiue, 2004]\n\nTo address the inherent limitations of NURBS, subdivision surfaces were introduced simultaneously by Catmull and Clark [1978] and Doo and Sabin [1978]. The two subdivision surface algorithms are generalizations of B-spline iterative mesh refinement rules, supporting arbitrary connectivity and manifold topology. These rules specify where points are added; how the positions of these points are computed; and how the mesh is reconnected. After an infinite iterative application of these subdivision rules, the mesh converges to a limit surface. Some subdivision algorithms were created specifically for triangular meshes, whereas others were created for quad meshes. Some were created specifically to interpolate the vertices of the control net. Some were designed for tangent continuity (C 1 ), and others for curvature continuity (C 2 ).\n\nTable 1-1 summarizes several well-known subdivision algorithms, and is by no means complete. The surface quality of various C 2 algorithms listed is deficient at certain isolated points, called extraordinary points, where they are only C 1 . What is considered to be an extraordinary point depends on the details of each algorithm. Section 2.2, for instance, will define the extraordinary point for Catmull-Clark surfaces and describe the surface behavior in its neighborhood.\n\nThe literature on the analysis techniques is enumerated at the end of Section 2.2.4.\n\nVarious surface construction algorithms were invented or adapted for applicability or quality. For example, quad/triangle subdivision mentioned in Table 1-1 is a combination of Catmull-Clark and Loop subdivisions applied to the quad and triangular portions of the mesh separately. New rules were developed for the boundary between the quad and triangle meshes, and the behavior of the surface along those edges is only C 1 .\n\nSince Catmull-Clark by itself was designed for quads and has undesirable shape on triangle meshes, its combination with Loop's algorithm improves overall surface quality and the applicability of the subdivision algorithm. Addressing surfaces of revolution, Morin et al. [2001] designed a subdivision algorithm capable of reproducing circles, which polynomial algorithms cannot do. This technique reproduces cubic polynomials, circles, and hyperbolic functions depending on a tension parameter. By tensoring the algorithm on a quad mesh, they obtained a surface that is C 2 except at extraordinary points, where it is C 1 . While most subdivision algorithms approximately quadruple the number of points in the mesh after every refinement, some are specifically designed to refine slowly: simplest subdivision [Peters and Reif, 1997] and 4-8 subdivision [Velho and Zorin, 2001] quadruple every two iterations; √ 3 subdivision [Kobbelt, 2000] increases 9-fold every two iterations.\n\nSlowing the refinement gives greater control over the size of the refined mesh. This is useful for rendering no more than is necessary.\n\nCatmull-Clark and Loop subdivision, the most well-known subdivision algorithms for quad and triangle meshes, respectively, are known to have unbounded curvature in the vicinity of the extraordinary point. Many attempts have been made to improve upon them. Sabin [1991] re-tuned Catmull-Clark so that it yielded surfaces with bounded curvature. Augsdörfer et al. [2006] went a step further to minimize Gaussian curvature variation within the space of bounded curvature algorithms. Various modifications have been made to Loop subdivision to support curvature continuity, albeit with a local flat spot with zero curvature [Prautzsch andUmlauf, 1998, 2000]; bounded curvature with the surface lying within the convex hull of the control points [Loop, 2002a,b]; and, curvature control [Ginkel and Umlauf, 2006]. Umlauf [2005] summarized many of these re-tuning techniques.\n\nNotable constructions that support arbitrary degree of smoothness even at the extraordinary point include free-form splines [Prautzsch, 1997] and TURBS [Reif, 1998], both of which require degree bi-(2k + 2) to create an everywhere-C k surface. Ying and Zorin [2004] created an everywhere-C ∞ surface using exponential blending functions between polynomial patches. More recent work by Karčiauskas andPeters [2007b, 2008] introduced the concept of guided subdivision also capable of achieving arbitrary continuity. For C 2 , they employ an infinite sequence of bi-degree-6 spline surface rings to approximate a C 2 \"guide surface\" of good quality. In [Karčiauskas and Peters, 2007d], they employ sequences of bicubic spline rings containing an exponentially-increasing number of polynomials to reproduce the guide surface's second order behavior at the extraordinary point in spite of the low degree of the overall construction. Our construction implicitly also uses bicubic spline surface rings of exponentially-increasing number of polynomials to achieve curvature continuity; however, this increase comes about naturally in our algorithm.\n\nA variety of other approaches have been used to improve shape near extraordinary points. Peters [2000] approximated Catmull-Clark surfaces with a finite number of bicubic patches that join tangent-continuously. As an alternative, Peters [2002] suggested a C 2 construction of degree (3, 5). Both these techniques still suffer from shape problems due to the low degree of the constructions. Loop and Schaefer [2008] achieved curvature continuity for quad meshes using patches of bi-degree 7 with shape optimization for the free parameters. Karčiauskas and Peters [2007c] used the concepts of guided subdivision to construct a C 2 surface with a finite number of bi-degree-6 patches. [Levin, 2006] perturbed\n\nCatmull-Clark surfaces using polynomial-square-root blending functions between local polynomial patches. In the same vein, Zorin [2006] perturbed Loop subdivision surfaces to be C 2 using a blending function that was itself a subdivision surface. Many of the surface construction algorithms mentioned above are complex or suffer in shape near high-valence vertices. Karčiauskas and Peters [2007] recognized one commonly-occurring configuration of high valence in quad-dominant meshes: the polar configuration, which is the focus of this study. The polar configuration consists of a high-valence central vertex -the polar vertex -in the middle of a triangle fan surrounded by a quad grid neighborhood. This configuration occurs naturally at the ends of elongated objects like tips of fingers, and in the latitude/longitude connectivity of the sphere (Figure 1-2), and it is structurally far simpler than the neighborhood of Catmull-Clark extraordinary points, as we show in Section 2. Catmull-Clark on polar configurations results in macroscopic oscillations in the polar neighborhood. Treating polar as a special case gives good results, even when the central valence is very high (Figure 23456). Karčiauskas et al. [2006] adapted guided subdivision to polar configuration to create C 2 polar jet subdivision, which employs a control net structure to make spline surface rings of degree (6, 5). Karčiauskas and Peters [2007a] introduced very simple bicubic C 1 subdivision algorithm with bounded curvature, which was subsequently adapted by Myles et al. [2008] to be compatible with Catmull-Clark subdivision. Myles et al. [2008] also offered a C 1 bicubic NURBS patch construction with bounded curvature to cover the neighborhood of the polar configuration.\n\nThere is no accepted mathematical definition of surface quality. For simulation, it is often useful to have well-defined curvatures. Additionally, the introduction of curvature continuity tends to improve visual quality of the modeled surface. Subdivision theory [Peters and Reif, 2008] states that Catmull-Clark subdivision cannot be re-tuned to be non-trivially C 2 at the extraordinary point with degree less than bi-6. In this study, we sidestep the assumptions underlying this theorem to take advantage of the natural subdivision structure of polar configurations to create a C 2 algorithm that has degree only bi-3. We also show that our simple subdivision algorithm yields surfaces with high visual quality and good curvature distribution.\n\nCHAPTER 2 GENERALIZATIONS OF UNIFORM BICUBIC SPLINES\n\nWe introduce notation and definitions to simplify the discussion.\n\n• For integers n, n h is an alternative notation for n-1 h=0 . For sets S, S η is an alternative notation for η∈S .\n\n• is the set of integers, and n is the integers modulo n. Ê is the set of reals. Ê 1 is Ê modulo 1. Z n is the strictly increasing sequence of integers in n .\n\n• An affine combination is a linear combination where the weights add to 1. A convex combination is an affine combination where the weights are positive.\n\nA detailed treatment of the B-spline form can be found in [Prautzsch et al., 2002].\n\nA piecewise polynomial in B-spline form is defined by a sequence of control points that defines the shape, and a uniformly-spaced knot sequence that defines the domain. The piecewise linear interpolant for a given ordering of control points is known as the control polygon (see Figure 2-1). A univariate cubic (i.e. degree 3) uniform spline f : Ê → Ê\n\nwith n control points b := [b 0 , b 1 , . . . , b n-1 ] requires n + 4 uniformly-spaced knots t := [t 0 , t 1 , . . . , t n+3 ] and is defined by\n\nwhere the n cubic B-spline bases N i (t) are\n\n(2-1)\n\nWhile the spline is technically defined on all of Ê, it is restricted for practical purposes 0,1,2,3,4,5,6,7] is the sum of uniform B-spline bases scaled by their respective control points (blue, green, magenta, cyan). B) An equivalent definition using iterative control polygon refinement.\n\nto t ∈ [t 3 , t n ], as in Figure 2-1, where at least four non-zero bases overlap. The basis functions are non-negative and sum to one in this interval, implying that each point on the spline is a convex combination of the control points. This yields two important geometric properties of B-splines.\n\n• Affine invariance: Applying an affine transformation to the control polyhedron applies it to the transformation spline as well.\n\n• Convex hull property: A parametric curve in B-spline form always lies in the convex hull of its control points.\n\nUniform cubic B-splines also have built-in second-order continuity so that adjacent polynomial pieces join C 2 .\n\nThe t-coordinate associated with each control point b i is called the Greville abscissa\n\n, where d is the degree of the spline. For uniform cubics, this simplifies to t * i = t i+2 . It will be useful later to index control points by their Greville abscissae when the knot sequence is chosen so that t * i = i n . To this end, we define the operator G\n\nand the bracketed fractional indexing notation.\n\n(2-3)\n\nUsing this notation, our spline is equivalently defined as\n\nOne can similarly define periodic uniform cubics f : Ê 1 → Ê, requiring the knot sequence to lie within Ê 1 . Since the knot sequence cycles around, we need only specify n knots -e.g. t = 1 n Z n -and assume by convention that the first control point has Greville abscissa 0.\n\nThe B-spline form can alternatively be defined via a control polygon refinement procedure as illustrated in Figure 2\n\nApplying this refinement procedure ad-infinitum converges to the spline curve.\n\nThe B-spline bases can be easily generalized to surfaces by tensoring the univariate bases, so that the bi-3 (i.e. bicubic, bi-degree-3, or degree (3,3)), surface f (s, t) is defined as\n\nwhere the spline is defined by the n s × n t control mesh b of control points, and two knot sequences s := [s 0 , s 1 , . . . , s n+3 ] and t := [t 0 , t 1 , . . . , t n+3 ] which define the B-spline bases\n\ninstead of a single real. A C B Figure 2-3. Commutativity of regular B-spline subdivision. Bi-3 spline subdivision A) in one direction followed by B) the other, or C) simultaneous refinement as in Catmull-Clark.\n\nThe surface can also be defined using a mesh refinement procedure. The control mesh may be subdivided in either tensored direction independently, to yield the same surface in closed form. Figure 2-3 illustrates this procedure on a parametric spline, where the mesh is (A) refined strictly in one direction twice followed by (B) the other one twice.\n\nAlternatively, one can tensor the subdivision masks so that one may (C) directly subdivide in both directions twice, converting each original quad into four refined ones after every tensored subdivision. While the utility of arbitrary valences may be obvious, an appreciation for polar configurations requires more observation. Figure 1-2 already demonstrates their utility on certain meshes, but we will justify treating polar configurations specially when examining subdivision surfaces in the following section.\n\nThe Catmull-Clark subdivision algorithm Catmull and Clark [1978] takes an arbitrary input mesh and subdivides it to produce a denser mesh on which the algorithm can again be applied. The limit surface corresponding to this sequence of evermore refined meshes is called the Catmull-Clark (limit) surface. For simplicity of discussion, we will assume closed meshes -i.e. those with no boundaries. An application of the Catmull-Clark subdivision procedure converts every face into multiple quads by: The exact refinement weights are not relevant in this discussion, and are omitted.\n\nHowever, it is worth noting that these weights depend only on the local connectivity of the control mesh. The weights are said to be stationary. Additionally, the connectivity is also stationary, in that the local connectivity around the extraordinary vertex has the same structure as before -a valence n vertex surrounded by quads with all other valences being 4. Subdivision schemes with stationary weights and connectivity are themselves said to be stationary.\n\nBi-3 polar subdivision [Karčiauskas and Peters, 2007a;Myles et al., 2008] can be thought of as generalizing Figure 2-3(A-B), where subdivisions happen strictly in one direction followed by the other one. We refer to the direction along the control lines emanating radially from the polar vertex as the radial direction, and the periodic direction as the circular direction. The limit surface is defined in this case by applying subdivision in the radial direction ad infinitum, followed by subdividing in the circular direction.\n\nHowever, for the purposes of approximating the limit surface with the mesh, we subdivide only a finite number of times in the radial direction before we switch to the circular direction as illustrated in Figure 2-5B. Bi-3 polar subdivision is stationary, and its subdivision weights are irrelevant for this discussion. We will instead detail and analyze a slightly more complex version of this algorithm in Section 3. As Figure 2-6 demonstrates, applying Catmull-Clark to a convex polar configuration results in macroscopic ripples that are clearly not specified by the control nets. However, treating polar configurations specially yields predictable surfaces with good behavior despite a high valence polar vertex. This justifies considering the polar configuration as a separate case.\n\nWhile uniform splines can be written out in closed form, Catmull-Clark and bi-3 polar subdivision surfaces are not as straightforward. As Figure 2-7 demonstrates, at any refinement level, the limit surface near extraordinary vertices and polar vertices is not directly available. However, subdividing once reveals a regular ring of quads, which undergo uniform bi-3 subdivision in subsequent refinements. The surface defined by this ring can hence be written out in closed form. Therefore, near extraordinary vertices and polar vertices, the surface consists of an infinite sequence of spline surface rings approaching a limit point. In the Catmull-Clark case, we call this limit point an extraordinary point, while in the polar case, it is called a pole. Observe also from Figure 2-7 that the boundary of each spline ring around a\n\nCatmull-Clark extraordinary point contains as many corners as the valence of the extraordinary vertex. As the extraordinary valence approaches infinity, the boundary consists of countably infinite corners. On the other hand, in the polar case, the boundary is smooth: in a perfectly symmetric case, the boundary approaches a circle as the valence approaches infinity. We exploit this behavior of the polar configuration in the new subdivision algorithms we design.\n\nSince the infinite sequence of spline rings defining the surface near extraordinary points and poles are themselves C 2 , the surface is C 2 away from these vertices. The behavior at the extraordinary points and poles requires a more advanced analysis of these spline sequences. Even though subdivision surfaces have been around for 30 years, only within the last 15 years were the mathematical tools for higher order analysis developed to maturity. In a landmark paper, Reif [1995] set a general framework to analyze arbitrary subdivision surface algorithms near and at the extraordinary point. Subsequent work by Prautzsch and Reif developed sufficient conditions and polynomial degrees for C k continuity by examining the infinite sequence of spline rings [Prautzsch and Reif, 1999b,a]. Zorin [2000] instead derived conditions based on the analysis of certain \"universal\" surfaces that are determined by the subdivision scheme of interest. Numerous papers have analyzed the behavior of subdivision surfaces around extraordinary points [Peters and Umlauf, 2000;Sabin et al., 2003;Peters and Reif, 2004;Karčiauskas et al., 2004;Reif and Peters, 2005]. The recent book [Peters and Reif, 2008] summarizes and extends the core results of the papers above on the theory of subdivision. Stam [1998] derived a constant-time algorithm for the evaluation of points and derivatives at parameter values arbitrarily close to the extraordinary point, and\n\nBoier-Martin and Zorin [2004] showed that a more canonical parameterization than the one used by Stam was needed to be able to always compute the derivatives at the extraordinary point.\n\nIt is now well-known that Catmull-Clark surfaces can have unbounded curvature near extraordinary points of valence not equal to 4 even though they are C 1 [Peters and Umlauf, 2000]. On the other hand, bi-3 polar subdivision [Karčiauskas and Peters, 2007a;Myles et al., 2008] was derived with bounded curvature in mind and tends to give predictable shapes in its areas of applicability. The purpose of this study is to go beyond bounded curvature to C 2 , while still having a simple subdivision algorithm.\n\nIn this chapter, we will analyze radial Taylor subdivision, a slightly more complex variant of bi-3 polar subdivision that also has bounded curvature at the pole. Trivial modifications of radial Taylor subdivision will yield subdivision algorithms that are C 2 at the pole as well.\n\nThe underlying data structure on which we operate is the polar configuration which consists of a central triangle fan surrounded by rings of ordinary quads (see Figure 3-1).\n\nThe central vertex of the triangle fan is called the polar vertex. The i-link (i = 0, 1, 2, . . .) of a polar configuration is the circular chain of vertices that is i edges away from the polar vertex. The 0-link consists of only the polar vertex itself. The i-ring (i = 0, 1, 2, . . .) consists of all the vertices that are no more than i edges away from the polar vertex.\n\nWhile the subdivision algorithms use special rules only in the 1-ring of the polar vertex, we assume for analysis that a polar configuration constitutes the 5-ring of the polar vertex.\n\nAs illustrated in Figure 3-1, the polar configuration is denoted by q and its valence (i.e. the valence of its polar vertex) is n. q i := [q i,0 , q i,1 , . . . , q i,n-1 ] T denotes the i-link of the polar configuration, and q ij is the j th control point (rotating counter-clockwise, modulo n) on this i-link. For j ∈ n , the j-spoke is the vector q * ,j := [q 0,0 , q 1,0 , . . . , q 5,0 ] T .\n\nCounting the polar vertex q 0j = q 00 repeatedly, q has 6n vertices. We can enumerate all q 00 q 0j q 1j q 2j q 3j q 4j q 5j Figure 3-1. A polar configuration consists of a total of 6n control points defining the 5-ring of a polar vertex (q 00 , which is counted n times) of valence n.\n\nFigure 3-2. The m-times subdivided polar configuration q m defines a cubic spline ring (G m q m ) (r, τ ) (orange) via (3-1). The radial parameter shrinks by half after each subdivision so that r ∈ [2, 4] for G 0 q 0 (r, τ ) and r ∈ [1, 2] for (G 1 q 1 ) (r, τ ).\n\nthese vertices as the column vector q := [q 0,0 , q 1,0 , . . . , q 5,0 , q 0,1 , q 1,1 , . . . , q 5,1 , . . . , q 0,n-1 , q 1,n-1 , . . . , q 5,n-1 ] T\n\nWe will extract the spline rings described in Section 2.2.3 in such a way that each control point q ij has the Greville abscissa j n in the circular direction. This allows us to simplify generalizations to infinite valences and non-stationary valence by using the valence-independent fractional indexing notation introduced in (2-3): q i,[ j n ] := q ij . Since j in q ij is modulo n, τ in q i,[τ ] is modulo 1.\n\nWhile in practice, each mesh vertex lies in Ê 3 , our analysis is the same as if q ij ∈ Ê since subdivision works on each coordinate independently. q m is the polar configuration after m subdivisions. Omission of the superscript refers to the initial data: q := q 0 . n m is the valence of q m , and n := n 0 .\n\nThe limit surface of the subdivision procedure is defined by an infinite sequence of spline rings that form a decomposition of the surface (see Figures 234567and 3-2). Each spline ring is the periodic uniform spline defined by the five outer links of q m . More precisely, 0,1,2,3,4,5,6,7], where λ := 1 2 ; and\n\nis the j th uniform periodic cubic B-spline basis with knots 1 n Z n .\n\nThe spline ring corresponding to q m is a map G m q m : [2λ m , 4λ m ] × Ê 1 → Ê, defined by the B-spline control points q m ij , with i ∈ {1, 2, 3, 4, 5} and j ∈ n such that\n\nwhere λ := 1 2 , indicating that the radial parameter of each spline ring shrinks by half after every subdivision as illustrated in Figure 3-2. As n m → ∞, the i-link converges to a curve\n\nObserve also that G m q m is linear with respect to q m . The polar limit surface x : [0, 4] × Ê 1 → Ê (Ê 3 in practice) in polar parameterization is defined piecewise in terms of these rings so that\n\n(3-3) and x(0, τ ) is the unique limit point, called the pole. The difference between our polar parameterization and the conventional one is that our circular direction is parameterized by Ê 1 instead of Ê 2π for notational convenience. The operator L converts a polar configuration q to its parameterized limit surface: L(q) := x.\n\nWe propose three alternative constructions for x in this study that build upon each other, and show that the latter two are curvature continuous at the pole. To avoid ambiguity, we will superscript x and L by the name of the subdivision algorithm they represent -i.e. L RTS (q) := x RTS as defined in Section 3.2.\n\nThe operator Ĝm is a simpler version of the operator G m that works strictly in the radial direction. For some vector u ∈ Ê 6 , Ĝm u : [2λ m , 4λ m ] → Ê is the cubic spline defined by the B-spline control points u i , with i ∈ {1, 2, 3, 4, 5}:\n\nĜm u (r) :=\n\nLike G m , Ĝm is also linear with respect to its parameter u.\n\nTo simplify notation, we additionally define c τ := cos (2πτ ) and s τ := sin (2πτ ) .\n\nThe fraction τ can also be represented as a ratio so that c j:n := cos 2π j n and s j:n := sin 2π j n .\n\nDefinition 1 (Radial Taylor subdivision). Radial Taylor subdivision, or RTS, refines an n-valent polar configuration q m to the n-valent polar configuration q m+1 defined by\n\nwhere\n\n4 , := 11 12 , j := -1 6n c j:n . (3-10) ... ... ... ... ... ... 1-/n /n /n 1-ˆ 0 0 1 n-1\n\nFigure 3-3. Radial Taylor subdivision rules. These masks show how to compute each vertex (•) on the refined mesh (light gray, dashed) based on the old mesh (dark gray, vertices as •). The special radial subdivision rules for RTS are isolated to the triangle fan at the center of the polar configuration. Further out, standard cubic rules are applied.\n\nThe limit surface is parameterized by x RTS , defined by the spline rings G m q m defined in\n\nThe subdivision rules of RTS are illustrated in Figure 3-3. It follows by definition that n m = n. Since q m+1 3j , q m+1 4j , q m+1 5j are computed via uniform cubic spline subdivision, G m q m defines a subset of x RTS . The refinement weights for bi-3 polar subdivision are identical to those of RTS, except that it uses uniform cubic subdivision for q m+1 2j . As was the case for bi-3 polar subdivision [Karčiauskas and Peters, 2007a], we assume, that the polar valence n ≥ 5. This assumption is not applicable to the other two subdivision algorithms, RTS ∞ and C 2 PS, that we define later.\n\nRTS can more compactly be written in terms of matrix multiplication:\n\nwhere A is a 6n × 6n matrix. Since the subdivision algorithm is rotationally symmetric around the polar vertex, our enumeration of the control points in q m allows us to write A in block circulant form, distributing evenly the contribution of the polar vertex amongst its n different labels q m 0j , j ∈ n .\n\nwhere\n\n(1-)/n /n 0 0 0 0 (1-ˆ 0 )/n j 0 0 0 0 0 j 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    , for j = 0.\n\nOnly the first 3 × 3 block of the subdivision matrix has non-standard weights, while the rest is merely the application of uniform cubic spline subdivision in the radial direction.\n\nNevertheless, the entire 6 × 6 matrix is required to define the spline rings for analysis.\n\nUsing tools summarized in [Peters and Reif, 2008], we analyze RTS the subdivision limit by examining the limit\n\nof the sequence of spline rings defining x RTS near the pole. Section 3.3.1 examines the spectrum of A that motivates the choice of its entries. Section 3.3.2 then reformulates RTS in eigenspace to derive, in Section 3.3.3, an expansion of the dominant terms at the pole and conclude that in the limit n → ∞, the limit surface is C 2 at the pole.\n\nThe subdivision algorithm (not necessarily the surface) is rotationally symmetric and periodic such that q m i,j+n = q m ij . This suggests that a Fourier transform in the circular direction may factor out the radial and circular behavior of the subdivision algorithm to aid our analysis. In other words, since the subdivision matrix A is block circulant due to the rotational symmetry of RTS, we can diagonalize it using the discrete Fourier transform. The complex Fourier block matrix\n\nwhere ω := exp 2π √ -1 n and I is the 6 × 6 identity matrix. It can easily be verified that F is almost orthogonal:\n\nwhere F * is the Hermitian adjoint (conjugate transpose) of F . An important property that is exploited later is that for k > 0, the k th and n -k th block columns of F -1 are complex conjugates of each other. We can now block diagonalize A via\n\nNote that this re-definition of ˆ 0 is consistent with its usage in the definition (3-9) of j .\n\nConsequently,\n\nÂk is called the k th Fourier block of Â and encodes the action of RTS on the k th frequency mode when going around the polar vertex. For instance, Â0 alone determines the effect of RTS when each control point q ij is independent of the circular index j. This includes polar configurations sampled from a constant function or a parabola.\n\nSince the eigenvalues and eigenvectors of A and Â are closely related by the Fourier transform, we use a similar notation for spectral analysis.\n\n• ℓ 0 , ℓ 1 , . . . , ℓ 6n-1 are the eigenvalues of the subdivision matrix A (and also Â) in non-increasing order of magnitude:\n\nEqual eigenvalues are listed once for each multiplicity and treated separately.\n\n• α k is the index of Fourier block Âα k contributing eigenvalue ℓ k , chosen so that\n\n• v k (respectively, w k ) is the 6n-dimensional right (respectively, left) real eigenvector of A corresponding to eigenvalue ℓ k .\n\n• vk (respectively, ŵk ) is the 6-dimensional right (respectively, left) eigenvector of the Fourier block Âα k , corresponding to eigenvalue ℓ k . vk is also called a radial eigenvector.\n\nWe abuse the caret (ˆ) notation to represent objects or functions in the Fourier domain, even if they do not directly arrive via a Fourier transform. For example, as seen shortly in (3-14), the operator Ĝm (see (3-4)) defines the radial limit curve of vk in a manner similar to G m defining the limit surface x.\n\nAs summarized in Table 3-1, we have (ℓ 0 , ℓ 1 , ℓ 2 , ℓ 3 , ℓ 4 , ℓ 5 ) = (1, λ, λ, µ, µ, µ)\n\nTable 3-1. The dominant spectral behavior of Â. The left ( ŵk ) and right (v k ) eigenvectors are normalized so that the related vectors w k and v k 2,11,26,47,74] [-1, 1, 0, 0, 0, 0] 4 2 1/4 , 11, 26, 47, 74] [0, 3, 0, 0, 0, 0] 5 n -2 1/4 , 11, 26, 47, 74] [0, 3, 0, 0, 0, 0] with λ := 1 2 and µ := λ 2 = 1 4 . The rest of the eigenvalues are real and positive with magnitude strictly less than ℓ 5 . The eigenvalues ℓ 0 = 1 and ℓ 3 = µ are from Â0 ; ℓ 1 = ℓ 2 = λ are from Â1 and Ân-1 ; and the final two ℓ 4 = ℓ 5 = µ are from Â2 and Ân-2 . In order for these five important Fourier blocks to exist, the valence n must be at least 5, justifying this assumption.\n\nSince A is an operation on polar configurations, the eigenvectors v k of A are also polar configurations. The eigenspline e RTS k : [0, 4] × Ê 1 → Ê is the limit surface L(v k ) of these polar configurations. The radial eigenspline êk : [0, 4] → Ê is the limit curve of radial eigenvector vk as defined by the decomposition êk (r) r∈[2λ m ,4λ m ] := Ĝm Âm α k vk (r).\n\n(3-14)\n\nFigure 3-4 illustrates the relationship, for example, between v 3 , v3 , e RTS 3 , and ê3 .\n\nLet Λ := diag(ℓ 0 , ℓ 1 , . . . , ℓ 6n-1 ) be a diagonal matrix of the eigenvalues of A (respectively Â), and V be a matrix whose columns enumerate the corresponding right eigenvectors (of any scale) of Â, so that Â V = V Λ. Then, implying that the columns of V C are (complex) eigenvectors of A. Since the Fourier blocks Âk and Ân-k are identical and the corresponding pairs of block columns of F -1 are complex conjugate, eigenvalues from these Fourier blocks are associated via V C = F -1 V with pairs of complex conjugate eigenvectors of A. The real eigenvectors v k of A can hence be computed as the real and imaginary portions of these complex eigenvectors:\n\nwhere k ∈ 6n , i ∈ 6 , and j ∈ n . According to Table 3-1, (op 0 (η), op 1 (η), . . . , op 5 (η)) =\n\n(1, c η , s η , 1, c 2η , s 2η ) . The eigenspline e RTS k inherits the tensored nature of v k .\n\nLemma 1. For any f : Ê → Ê, the operator\n\nuses uniform samples on a function f as the control points of a periodic spline. Then, the eigenspline\n\nLemma 1 shows that the block diagonalization factors the radial from the circular.\n\nFrom this formulation, it is also obvious that e RTS k is periodic in τ with a period of 1 α k , which is a direct consequence of vk having frequency mode α k . Eigensplines and radial eigensplines also inherit the scaling property of eigenvectors, in that for r = λr, With this scaling relationship, the first six radial eigensplines can be written out explicitly. The subdivision matrix A was constructed to have the spectral behavior in Table 3-1 in order to satisfy the following key lemma. For succinctness and clarity, we use the notation B n c ατ for (B n (γ → c αγ )) (τ ), where the operator B n is applied to the function γ → c αγ := cos(2παγ), and the resulting spline is evaluated at τ . Similarly,\n\nLemma 2 (Reproduction of Radial Taylor Basis Functions). For r ∈ [0, 4],\n\nwhich imply, by Lemma 1, that\n\nProof. (3-19) follows since Â0 v0 = v0 and Ĝ0 v0 (r) = 1. We can now verify, for\n\n] by B-spline-to-power-series conversion\n\n(2-1). The additional property from (3-18) that êk ( 1 2 r) = 1 2 êk (r) implies (3-20). Similarly, for k ∈ {3, 4, 5}, B-spline-to-power-series conversion shows that êk (r\n\nLemma 2 is used to derive a quadratic Taylor expansion to show second-order continuity for two of our proposed subdivision algorithms.\n\nDefining the real matrix V R as having k th column v k , we have (as in (3-15)),\n\nimplying that the rows of\n\nprojects the polar configuration into eigenspace using these left eigenvectors w k . Precisely, q (respectively, x RTS ) can be written as a linear combination of the 6n right eigenvectors v k (respectively, eigensplines ê) as\n\nwhere each eigencoefficient p k is the inner product of w k and q. As was the case for v k , w k is computed from ŵk (listed in Table 3-1) using the inverse Fourier transform so that\n\nThe eigencoefficient p m k := w T k q m of q m simplifies to\n\nThe refinement equations (3-5)-(3-8) of RTS can now be rewritten in terms of p k .\n\nLemma 3. The m-times refined mesh q m is defined by eigencoefficients and powers of eigenvalues as follows.\n\nProof.\n\nThe proof for (3-30)-(3-33) is similar to that of (3-29).\n\nWith the radial eigenvectors v0 , 11, 26, 47, 74], and v4 = v5 = 1 3 [0,2,11,26,47,74], (3-28)-(3-33) can be written as\n\nfor i ∈ 6 . In particular,\n\nconverging to a unique point p 0 , showing that x RTS (r, τ ) is C 0 at the pole.\n\nC 0 and C 1 continuity can be seen more explicitly by expressing x RTS using the eigenprojection.\n\nx RTS (r, τ )\n\nThis expansion using the eigensplines is almost a Taylor expansion. [Peters and Reif, 2008, Section 5.2] shows that the characteristic spline χ(r, τ Taylor expansion\n\nand is therefore C 1 at the pole. By the conditions in [Peters and Reif, 2008, Section 7.1],\n\nthe additional property that (ℓ 0 , ℓ 1 , ℓ 2 , ℓ 3 , ℓ 4 , ℓ 5 ) = (1, λ, λ, λ 2 , λ 2 , λ 2 ) implies that the limit surface also has bounded curvature.\n\nIn order to take this a step further to C 2 continuity, we need eigensplines e RTS , and e RTS 5 need degree (2, 6) to be quadratic in χ. This implies that it is impossible to create a stationary C 2 subdivision for polar configurations based on uniform splines with degree less than 6 in the circular direction.\n\nHowever, in the limit n → ∞, the surface around the pole is no longer a spline in the circular direction, but an arbitrary curve q i,[τ ] for τ ∈ Ê 1 (Figure 3-4B). Denote this case as RTS ∞ , with q i,[τ ] being the control curves of this subdivision algorithm. We now show that a non-trivial second-order Taylor expansion exists at the pole for RTS ∞ .\n\nProof. Since êk (r) is independent of valence, and\n\nwe need only examine the spline approximation of op k (τ ) via B n . We show that 1. the distance between B n op k (τ ) and its control polygon is O 1 n 2 , and that 2. op k (τ ) and its linear interpolant (i.e. the control polygon of B n op k (τ )) is O 1 n 2 . Together, these statements imply by the triangle inequality that e RTS k (r, τ )êk (r) op k (τ ) = O( 1 n 2 ), proving the lemma.\n\nStep 1. [Lutterkort and Peters, 2001] showed that for uniform cubic splines with control points [q ij ] j∈Zn , the distance between the control polygon and the spline is proportional to the second differences of the control points: 1 6 max j {|q i,j-1 -2q ij + q i,j+1 |}. In the context of this lemma, q ij = op k j n , and 1 6 max\n\nStep 2. For an arbitrary function f : [a, b] ∈ Ê → Ê, a Taylor expansion at a shows that a piecewise linear interpolant with distance 1 n between breakpoints approximates f with a deviation of O 1 n 2 max [a,b] {f ′′ } . Consequently, the piecewise linear interpolant to op k (τ ) converges O\n\nTheorem 1. In the limit n → ∞, RTS is C 2 at the pole.\n\nProof. Assuming n → ∞ and continuing from (3-35),\n\nx RTS∞ (r, τ )\n\nChanging from polar to Cartesian coordinates (x, y) := (rc τ , rs τ ), x RTS∞ (x, y) :=\n\nx RTS∞ (r, τ ) reveals the following second-order Taylor expansion at the pole x RTS∞ (x, y) = p 0 + (p 1 x + p 2 y) + p 3 (x 2 + y 2 ) + p 4 (x 2 -y 2 ) + p 5 (2xy) + o x 2 + y 2 , proving C 2 continuity at the pole.\n\nNevertheless, curvature continuity comes at a cost: we are no longer polynomial in the circular direction. In the Chapter 4, we adapt the intuition developed so far to create a C 2 bi-3 subdivision algorithm that overcomes these disadvantages.\n\nMesh refinement is easiest to demonstrate on a control mesh with latitude-longitude connectivity of the earth as in Figures 2-5B and 2-6. Such a spherical mesh consists entirely of ordinary quads and exactly two polar configurations. Spherical meshes have precisely two directions: A) radial, or longitudinal, corresponding to the j-spokes of the polar configurations; and B) circular, or latitudinal, corresponding to the i-links of the polar configurations. Each radial sequence of control points of the spherical mesh is similarly called a spoke, while each (periodic) circular sequence is a link. We can perform radial subdivision along the spokes of a spherical mesh by using the special RTS rules of Definition 1 and Figure 3-3 in the vicinity of polar vertices, while using univariate cubic refinement (2-4) away from them. We can also double the valence of each polar vertex by performing circular subdivision along each link using univariate cubic refinement.\n\nThe RTS limit surface is defined by continually applying radial subdivision and interpreting links sufficiently far away from the polar vertex as the control points of a uniform bi-3 spline, implying that circular subdivision may be applied on these links.\n\nConsequently, the RTS limit surface of a spherical mesh can be computed a la Figure 2-2(A-B) by applying radial subdivision ad infinitum followed by circular subdivision ad\n\ninfinitum. An m-times subdivided approximation this limit surface can hence be computed by subdividing m times in the radial direction followed by m-times subdividing in the circular direction, as demonstrated in Figure 2-5B.\n\nOn the other hand, the curvature-continuous variation RTS ∞ requires each polar vertex to have infinite valence before radial subdivision is ever applied. This is accomplished by interpreting each link to be the control points of a cubic spline which acts as a control curve of RTS ∞ . The corresponding limit surface can be computed by applying circular subdivision ad infinitum (converging to the control curves) followed by radial subdivision.\n\nAs a result, an m-times refined approximation is computed by subdividing m times in the circular direction followed by m-times in the radial direction. Either mesh refinement technique can be combined with Catmull-Clark subdivision to be applicable to arbitrary quad meshes augmented with polar configurations (see Figure 345).\n\nSplit off polar configurations: Copy all polar 3-rings and remove each polar vertex from the input mesh.\n\nCHAPTER 4 C 2 POLAR SUBDIVISION (C 2 PS)\n\nRTS can be adapted to non-stationary connectivity while keeping the weights dependent only on the connectivity of the mesh. In particular, the valence of the polar vertex doubles after every subdivision. We are no longer limited by stationary subdivision theory, which requires degree 6 in the circular direction for second-order continuity, as shown previously.\n\nDefinition 2. Denote by C 2 polar subdivision (C 2 PS) the algorithm that subdivides an n m -valent polar configuration q m to an 2n m -valent polar configuration q m+1 via (see Figure 4-1)\n\n(4-2)\n\nwhere qm is obtained after subdividing q m once in the circular direction. Observe that q m+1 3,[τ ] , q m+1 4,[τ ] , q m+1 5,[τ ] are computed via uniform bi-3 spline subdivision. Let the operator T denote a single application of C 2 PS. The limit surface x C 2 PS is the union of spline rings G m q m where q m := T m (q 0 ).\n\nC 2 polar subdivision rules. The rules are the same as RTS (Figure 3-3), except that the outer i-links require intermediate uniform cubic circular subdivision (intermediate vertices indicated by 2). The refined mesh (• and dashed lines) is computed as before from the old mesh (•, solid lines) with j and j computed via (3-9) and (3-10) using half-integer indices. As in RTS, bi-3 rules are applied away from the polar vertex.\n\nSince C 2 PS subdivides in both the radial and circular directions simultaneously, it is directly compatible with Catmull-Clark, requiring no mesh separation for refinement: every quad on the coarse mesh yields four after subdivision, and each polar triangle splits into two polar triangles and two quads, as illustrated in Figure 4-1. Additionally, the limit surface is bi-3 and can be computed as a closed-form expression, which is difficult to do for RTS on an infinite-valent vertex. Each subsequent spline ring has twice as many polynomial patches and control points as its predecessor, and this exponentially-increasing order of approximation enables the spline ring sequence to converge to a second-order Taylor expansion at the pole.\n\nSince the connectivity is no longer stationary at the polar vertex, the traditional method of spectral analysis does not directly apply. However, if we rewrite (4-1)-(4-4)\n\nin eigenspace as we did RTS in Section 3.3.2, we can employ a similar analysis technique.\n\nWhat helps is the intuition from RTS that the second-order expansion at the pole is determined by the eigensplines e k multiplied by eigencoefficients p k defined in (3-27).\n\nThe eigencoefficient p m k of C 2 PS is also computed via (3-27) on q m , and we abbreviate p k := p 0 k . The eigensplines of C 2 PS are the limit surface e\n\nwhere v k is an eigenvector of RTS with polar valence n 0 . A superscript of RTS nm disambiguates the eigenspline e\n\nRTSn m k of RTS on a valence n m polar configuration.\n\nThe following subsections will show the following.\n\n• As in RTS, p k∈ 6 is preserved after every application of T -i.e.\n\n• T can be approximated in terms of p k∈ 6 plus a deviation of O 1 8 m for polar valence n m (Lemma 6).\n\n• For k ∈ 6n , e C 2 PS k converges to e RTS∞ k at the rate of O 1 8 m at the pole (Lemma 7).\n\n• The statements above yield a second-order Taylor expansion of x C 2 PS at the pole proving that it is C 2 (Theorem 2).\n\nThe following simplifications can be shown by using the addition rule for sine and cosine, and the orthogonality of the discrete Fourier basis.\n\nUsing these simplifications, we prove the following lemma for C 2 PS.\n\nLemma 5. For the subdivision algorithm C 2 PS, p m k = ℓ m k p k when k ∈ 6 and m ≥ 0.\n\nProof. The base case m = 0 of the induction is trivially true. For the inductive step, we assume p m k = ℓ m k p k and show that this property holds for p m+1 k as well.\n\nCase k ∈ {0, 3}:\n\nThe sequence of steps for k = 0 is very similar to those of k = 3 above, and it similarly concludes that p m+1 0 = ℓ m+1 0 p 0 .\n\nCase k ∈ {1, 2, 4, 5}:\n\nThe k ∈ {2, 4, 5} cases are derived using a very similar sequence of steps, showing that for all six cases p m+1 k = ℓ m+1 k p k , completing the induction.\n\nIn the same vein as (3-28)-(3-33), C 2 PS can be reformulated to depend only on p k∈ 6 plus a deviation that diminishes quickly in the number of subdivisions.\n\nLemma 6. The C 2 PS refinement equations (4-1)-(4-4) are of the form\n\n(4-10)\n\nDue to the interaction with circular subdivision, the derivation for the four outer links q m+1 2,[τ ] -q m+1 5,[τ ] is involved and requires the introduction of new abstractions. The proof of (4-6)-(4-11) is hence deferred to the appendix to maintain the flow of this discussion.\n\nWe can now establish a second-order Taylor expansion at the pole, proving curvature continuity.\n\nTheorem 2. C 2 PS is C 2 at the pole.\n\nProof. Recall from (3-24) that a polar configuration q 0 of valence n 0 can be written as the following linear combination of the eigenvectors, v 0 k , k ∈ 6n 0 . ,\n\ngiving an explicit second-order expansion at the pole when m → ∞. Hence the construction is C 2 .\n\nThe explicit Taylor expansion at the pole allows one to compute principal curvatures and directions. In some constructions, curvature continuity comes at the cost of macroscopic shape deterioration, even though the microscopic shape is improved. Chapter 5 shows empirically that our construction does not suffer from this defect; it generates surfaces of high visual quality.\n\nsubdivision algorithm exploiting non-stationary connectivity. We hope techniques such as ours help make subdivision surfaces more useful in mainstream CAD.\n\nSince adjacent Greville abscissae differ by 1 n , the affine combinations in aff 4\n\n[γ] (u) are such that |γ g -γ| < 2 n = O( 1 n ) if u g = 0. Cubic B-spline refinement rules ensure that all affine combinations resulting from arbitrarily-many cubic B-spline refinements on u belong in aff 4\n\n[γ] (u). The control points in each circularly-subdivided i-link qm i are affine combinations of control points in the i-link q m i . Since these affine combinations result in an arbitrary number of cases in our reformulation of C 2 PS, we focus on simplifying affine combinations of trigonometric functions.\n\nmy advisor Jörg Peters, for giving me so much intuition and positive experience during my 8 years working in graphics and geometry. I additionally thank Xiaobin Wu for helping me develop my early intuition on subdivision surfaces during our internship at ATI, and my roommate Il (Memming) Park for our math brainstorm, which improved my intuition of the theoretical structure underlying this work."
}